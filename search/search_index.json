{"config":{"lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 Python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u00b6 \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u00b6 Coding Interview University - \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0443\u0440\u0441, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u043c, \u0433\u043e\u0442\u043e\u0432\u0438\u0432\u0448\u0438\u043c\u0441\u044f \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0432 Google. \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u043e\u0431\u0440\u0430\u043b 137k \u0437\u0432\u0451\u0437\u0434. awesomne-coding-interview - \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. Python Cheatsheet \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a \u043f\u043e Python. Real Python - \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438 \u043f\u043e core-Python, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. awesome-python - \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0442.\u0434.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#python-","text":"","title":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 Python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430"},{"location":"#_1","text":"Coding Interview University - \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0443\u0440\u0441, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u043c, \u0433\u043e\u0442\u043e\u0432\u0438\u0432\u0448\u0438\u043c\u0441\u044f \u043a \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0432 Google. \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u043e\u0431\u0440\u0430\u043b 137k \u0437\u0432\u0451\u0437\u0434. awesomne-coding-interview - \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0441\u0442\u0430\u0442\u0435\u0439, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. Python Cheatsheet \u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a \u043f\u043e Python. Real Python - \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c\u0438 \u043f\u043e core-Python, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. awesome-python - \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0442.\u0434.","title":"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b"},{"location":"example/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u00b6 \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MkDocs \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439. \u0410\u043d\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b \u00b6 $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 termynal . \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u00b6 Note \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043e\u0434\u0430 \u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. Tip \u0422\u0435\u043a\u0441\u0442 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438. Check \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c. Warning \u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f . Danger \u041e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c!. \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u00b6 import sys if __name__ == '__main__' : sys . stdout . write ( \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\" ) \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a: import sys if __name__ == '__main__' : msg : str = \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \\n \" sys . stdout . write ( msg ) \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432 . Mermaid-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u00b6 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432"},{"location":"example/#mkdocs","text":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MkDocs \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439.","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 MkDocs \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432"},{"location":"example/#_1","text":"$ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 termynal .","title":"\u0410\u043d\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b"},{"location":"example/#_2","text":"Note \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043e\u0434\u0430 \u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u043c\u0435\u0442\u043a\u0438. Tip \u0422\u0435\u043a\u0441\u0442 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438. Check \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c. Warning \u0422\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f . Danger \u041e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c!.","title":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438"},{"location":"example/#_3","text":"import sys if __name__ == '__main__' : sys . stdout . write ( \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\" ) \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a: import sys if __name__ == '__main__' : msg : str = \"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \\n \" sys . stdout . write ( msg ) \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043d\u0438\u043f\u043f\u0435\u0442\u043e\u0432 .","title":"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430"},{"location":"example/#mermaid-","text":"graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users","title":"Mermaid-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"content/check/","text":"","title":"Check"},{"location":"content/questions/","text":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u00b6 \u0412\u0437\u044f\u0442\u043e \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0430\u0445 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 All Algorithms Implemented in Python All Algorithms Implemented in JavaScript Comprehensive list of interview questions of top tech companies A great list of Java interview questions Algorithms playground for common interview questions written in Ruby EKAlgorithms contains some well known CS algorithms & data structures Five programming problems every Software Engineer should be able to solve in less than 1 hour Top 10 Algorithms for Coding Interview Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top Algorithms Questions by Topics Daily Coding Interview Practice \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 Data Structures Implemented in Python Data Structures Introductions Common Python Data Structures (Guide) Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top 50 Data Structure Interview Questions from Career Guru \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern Design Patterns for Humans\u2122 - An ultra-simplified explanation Design Patterns in Python \u0413\u0430\u0439\u0434 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c \u043e\u0442 Refactoring.Guru \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u00b6 \u0413\u0430\u0439\u0434 \u043f\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0443 \u043e\u0442 Refactoring.Guru Python \u00b6 Avito - \u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0430 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0443\u043c\u0435\u0435\u0442 \u0432 Python. pythonist.ru - \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (3 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044f\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438) 26 Essential Python Interview Questions from Adeva 50 Python interview questions and answers 11 Essential Python Interview Questions from Toptal Toptal hiring guide A listing of questions that could potentially be asked for a python job listing Interview Questions for both beginners and experts Interview Cake Python Interview Questions Python Frequently Asked Questions (Programming) Python interview questions collected by Reddit users Top 25 Python Interview Questions from Career Guru Python Interview 10 questions from Corey Schafer Python interview questions. Part I. Junior Python interview questions. Part II. Middle Python interview questions. Part III. Senior Python Interview Questions and Answers (2019) 100 Python Interview Questions - Quick Refresher Django \u00b6 Some abstract interview questions for Python/Django developers Some Django basic interview questions to establish the basic level of the candidates Top 16 Django Interview Questions for both freshers and experienced developers \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 PostgreSQL \u00b6 13 PostgreSQL Interview Q&A Frequently Asked Basic PostgreSQL Interview Questions and Answers PostgreSQL Interview Preparation Guide PostgreSQL Interview Q&A from CoolInterview.com SQL \u00b6 10 Frequently asked SQL Query Interview Questions 45 Essential SQL Interview Questions from Toptal Common Interview Questions and Answers General Interview Questions and Answers Schema, Questions & Solutions for SQL Exercising SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL SQL Interview Questions CHEAT SHEET \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 Memcached \u00b6 Memcached Interview Questions from Javapoint Memcached Interview Questions from Wisdomjobs Redis \u00b6 Redis Interview Questions from Javapoint Redis Interview Questions from Wisdomjobs Redis Interview Questions from Career Guru \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0421\u0438\u0441\u0442\u0435\u043c\u044b \u00b6 Linux \u00b6 10 Job Interview Questions for Linux System Administrators from Linux.com 10 Useful Random Linux Interview Questions and Answers 11 Basic Linux Interview Questions and Answers 11 Essential Linux Interview Questions from Toptal Some basic Linux questions from ComputerNetworkingNotes.com Top 30 Linux System Admin Interview Questions & Answers Top 50 Linux Interview Questions from Career Guru Linux System Administrator/DevOps Interview Questions 278 Test Questions and Answers for *nix System Administrators Linux Interview Questions - Quick Refresher \u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f \u00b6 Common interview questions and puzzles solved in a number of languages Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions Interview questions solved in python \u0421\u0435\u0442\u0438 \u00b6 Top 100 Networking Interview Questions & Answers from Career Guru \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u0449\u0438\u0435 \u0442\u0435\u043c\u044b \u0434\u043b\u044f Backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u00b6 Some simple questions to interview potential backend candidates An Annotated List of Backend Developer Technical Interview Questions An Annotated List of DevOps Technical Interview Questions Docker \u00b6 Docker Interview Questions Top Docker Interview Questions You Must Prepare In 2019 Top Docker Interview Questions And Answers DOCKER (SOFTWARE) INTERVIEW QUESTIONS & ANSWERS 30 Docker Interview Questions and Answers in 2019 GraphQl \u00b6 8 GraphQl Interview Questions To Know How to GraphQl - Common Questions","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"content/questions/#_1","text":"\u0412\u0437\u044f\u0442\u043e \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0430\u0445 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430.","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438"},{"location":"content/questions/#_2","text":"All Algorithms Implemented in Python All Algorithms Implemented in JavaScript Comprehensive list of interview questions of top tech companies A great list of Java interview questions Algorithms playground for common interview questions written in Ruby EKAlgorithms contains some well known CS algorithms & data structures Five programming problems every Software Engineer should be able to solve in less than 1 hour Top 10 Algorithms for Coding Interview Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top Algorithms Questions by Topics Daily Coding Interview Practice","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/questions/#_3","text":"Data Structures Implemented in Python Data Structures Introductions Common Python Data Structures (Guide) Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top 50 Data Structure Interview Questions from Career Guru","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/questions/#_4","text":"Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern Design Patterns for Humans\u2122 - An ultra-simplified explanation Design Patterns in Python \u0413\u0430\u0439\u0434 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430\u043c \u043e\u0442 Refactoring.Guru","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/questions/#_5","text":"\u0413\u0430\u0439\u0434 \u043f\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0443 \u043e\u0442 Refactoring.Guru","title":"\u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433"},{"location":"content/questions/#python","text":"Avito - \u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0430 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0443\u043c\u0435\u0435\u0442 \u0432 Python. pythonist.ru - \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 (3 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044f\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438) 26 Essential Python Interview Questions from Adeva 50 Python interview questions and answers 11 Essential Python Interview Questions from Toptal Toptal hiring guide A listing of questions that could potentially be asked for a python job listing Interview Questions for both beginners and experts Interview Cake Python Interview Questions Python Frequently Asked Questions (Programming) Python interview questions collected by Reddit users Top 25 Python Interview Questions from Career Guru Python Interview 10 questions from Corey Schafer Python interview questions. Part I. Junior Python interview questions. Part II. Middle Python interview questions. Part III. Senior Python Interview Questions and Answers (2019) 100 Python Interview Questions - Quick Refresher","title":"Python"},{"location":"content/questions/#django","text":"Some abstract interview questions for Python/Django developers Some Django basic interview questions to establish the basic level of the candidates Top 16 Django Interview Questions for both freshers and experienced developers","title":"Django"},{"location":"content/questions/#_6","text":"","title":"\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/questions/#postgresql","text":"13 PostgreSQL Interview Q&A Frequently Asked Basic PostgreSQL Interview Questions and Answers PostgreSQL Interview Preparation Guide PostgreSQL Interview Q&A from CoolInterview.com","title":"PostgreSQL"},{"location":"content/questions/#sql","text":"10 Frequently asked SQL Query Interview Questions 45 Essential SQL Interview Questions from Toptal Common Interview Questions and Answers General Interview Questions and Answers Schema, Questions & Solutions for SQL Exercising SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL SQL Interview Questions CHEAT SHEET","title":"SQL"},{"location":"content/questions/#_7","text":"","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/questions/#memcached","text":"Memcached Interview Questions from Javapoint Memcached Interview Questions from Wisdomjobs","title":"Memcached"},{"location":"content/questions/#redis","text":"Redis Interview Questions from Javapoint Redis Interview Questions from Wisdomjobs Redis Interview Questions from Career Guru","title":"Redis"},{"location":"content/questions/#_8","text":"","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0421\u0438\u0441\u0442\u0435\u043c\u044b"},{"location":"content/questions/#linux","text":"10 Job Interview Questions for Linux System Administrators from Linux.com 10 Useful Random Linux Interview Questions and Answers 11 Basic Linux Interview Questions and Answers 11 Essential Linux Interview Questions from Toptal Some basic Linux questions from ComputerNetworkingNotes.com Top 30 Linux System Admin Interview Questions & Answers Top 50 Linux Interview Questions from Career Guru Linux System Administrator/DevOps Interview Questions 278 Test Questions and Answers for *nix System Administrators Linux Interview Questions - Quick Refresher","title":"Linux"},{"location":"content/questions/#_9","text":"Common interview questions and puzzles solved in a number of languages Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions Interview questions solved in python","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f"},{"location":"content/questions/#_10","text":"Top 100 Networking Interview Questions & Answers from Career Guru","title":"\u0421\u0435\u0442\u0438"},{"location":"content/questions/#backend-","text":"Some simple questions to interview potential backend candidates An Annotated List of Backend Developer Technical Interview Questions An Annotated List of DevOps Technical Interview Questions","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u0449\u0438\u0435 \u0442\u0435\u043c\u044b \u0434\u043b\u044f Backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430"},{"location":"content/questions/#docker","text":"Docker Interview Questions Top Docker Interview Questions You Must Prepare In 2019 Top Docker Interview Questions And Answers DOCKER (SOFTWARE) INTERVIEW QUESTIONS & ANSWERS 30 Docker Interview Questions and Answers in 2019","title":"Docker"},{"location":"content/questions/#graphql","text":"8 GraphQl Interview Questions To Know How to GraphQl - Common Questions","title":"GraphQl"},{"location":"content/algorithms/tasks/","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u00b6 https://m.habr.com/ru/company/yandex/blog/340784/ https://m.habr.com/ru/company/yandex/blog/337690/ \u0415\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u043f\u043e\u043c\u043d\u044e: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getPrimes(n) // \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 2 \u0434\u043e n; \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0443\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438; check(\"{()}[]\") // true check(\"{[}]\") // false 3. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e sum \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 sum(1)(2)(5)(10) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u043e 17. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getAnagrams getAnagrams(\u201c\u043d\u043e\u0441\u201d, \u201c\u0441\u043e\u043d\u201d, \u201c\u0441\u043d\u0435\u0434\u044c\u201d, \u201c\u0434\u043d\u0435\u0441\u044c\u201d) \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c [ [\"\u043d\u043e\u0441\", \"\u0441\u043e\u043d\"], [\"\u0434\u043d\u0435\u0441\u044c\", \"\u0441\u043d\u0435\u0434\u044c\"] ] https://github.com/protasovse/yandex_interview_python https://github.com/Gooogr/Yandex_interview_tasks https://github.com/soar/yandex-log-analyzer","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/algorithms/tasks/#_1","text":"https://m.habr.com/ru/company/yandex/blog/340784/ https://m.habr.com/ru/company/yandex/blog/337690/ \u0415\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u043f\u043e\u043c\u043d\u044e: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getPrimes(n) // \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 2 \u0434\u043e n; \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0443\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438; check(\"{()}[]\") // true check(\"{[}]\") // false 3. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e sum \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 sum(1)(2)(5)(10) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u043e 17. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e getAnagrams getAnagrams(\u201c\u043d\u043e\u0441\u201d, \u201c\u0441\u043e\u043d\u201d, \u201c\u0441\u043d\u0435\u0434\u044c\u201d, \u201c\u0434\u043d\u0435\u0441\u044c\u201d) \u0414\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c [ [\"\u043d\u043e\u0441\", \"\u0441\u043e\u043d\"], [\"\u0434\u043d\u0435\u0441\u044c\", \"\u0441\u043d\u0435\u0434\u044c\"] ] https://github.com/protasovse/yandex_interview_python https://github.com/Gooogr/Yandex_interview_tasks https://github.com/soar/yandex-log-analyzer","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/algorithms/implementations/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430 Python \u00b6 \u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u00b6 Bisection Gaussian Elimination In Static Equilibrium Intersection Lu Decomposition Newton Forward Interpolation Newton Method Newton Raphson Secant Method \u041f\u043e\u0438\u0441\u043a \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c (Backtracking) \u00b6 All Combinations All Permutations All Subsequences Coloring Hamiltonian Cycle Knight Tour Minimax N Queens N Queens Math Rat In Maze Sudoku Sum Of Subsets \u0411\u0438\u0442\u043e\u0432\u0430\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u044f \u00b6 Binary And Operator Binary Or Operator Binary Xor Operator \u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u00b6 Chinese Remainder Theorem Diophantine Equation Modular Division \u0410\u043b\u0433\u0435\u0431\u0440\u0430 \u043b\u043e\u0433\u0438\u043a\u0438 \u00b6 Quine Mc Cluskey \u041a\u043b\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u044b \u00b6 One Dimensional \u0428\u0438\u0444\u0440\u044b \u00b6 A1Z26 Affine Cipher Atbash Base16 Base32 Base64 Cipher Base85 Brute Force Caesar Cipher Caesar Cipher Cryptomath Module Decrypt Caesar With Chi Squared Deterministic Miller Rabin Diffie Elgamal Key Generator Enigma Machine2 Hill Cipher Mixed Keyword Cypher Morse Code Implementation Onepad Cipher Playfair Cipher Porta Cipher Rabin Miller Rail Fence Cipher Rot13 Rsa Cipher Rsa Factorization Rsa Key Generator Shuffled Shift Cipher Simple Keyword Cypher Simple Substitution Cipher Trafid Cipher Transposition Cipher Transposition Cipher Encrypt Decrypt File Vigenere Cipher Xor Cipher \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0421\u0436\u0430\u0442\u0438\u044f \u00b6 Burrows Wheeler Huffman Lempel Ziv Lempel Ziv Decompress Peak Signal To Noise Ratio \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 \u00b6 Harriscorner \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u00b6 Binary To Decimal Binary To Octal Decimal To Any Decimal To Binary Decimal To Binary Recursion Decimal To Hexadecimal Decimal To Octal Hexadecimal To Decimal Prefix Conversions Roman To Integer Temperature Conversions \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u0414\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (Binary Tree) Avl Tree Basic Binary Tree Binary Search Tree Binary Search Tree Recursive Binary Tree Mirror Fenwick Tree Lazy Segment Tree Lowest Common Ancestor Non Recursive Segment Tree Number Of Possible Binary Trees Red Black Tree Segment Tree Segment Tree Other Treap \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 (Disjoint Set) Alternate Disjoint Set Disjoint Set \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Hashing) Double Hash Hash Table Hash Table With Linked List \u0422\u0435\u043e\u0440\u0438\u044f \u0427\u0438\u0441\u0435\u043b (Number Theory) Prime Numbers Quadratic Probing \u041a\u0443\u0447\u0430 (Heap) Binomial Heap Heap Heap Generic Max Heap Min Heap Randomized Heap \u0421\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 (Linked List) Circular Linked List Deque Doubly Doubly Linked List From Sequence Has Loop Is Palindrome Middle Element Of Linked List Print Reverse Singly Linked List Skip List Swap Nodes \u041e\u0447\u0435\u0440\u0435\u0434\u0438 (Queue) Circular Queue Double Ended Queue Linked Queue Priority Queue Using List Queue On List Queue On Pseudo Stack \u0421\u0442\u0435\u043a\u0438 (Stacks) Balanced Parentheses Dijkstras Two Stack Algorithm Infix To Postfix Conversion Infix To Prefix Conversion Linked Stack Next Greater Element Postfix Evaluation Prefix Evaluation Stack Stack Using Dll Stock Span Problem \u041f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (Trie) Trie \u0426\u0438\u0444\u0440\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u00b6 Change Brightness Change Contrast Convert To Negative \u0414\u0438\u0437\u0435\u0440\u0438\u043d\u0433 (Dithering) Burkes \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 (Edge Detection) Canny \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f (Filters) Bilateral Filter Convolve Gaussian Filter Median Filter Sobel Filter \u042d\u043a\u0432\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c (Histogram Equalization) Histogram Stretch Index Calculation \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 (Resize) Resize \u0412\u0440\u0430\u0449\u0435\u043d\u0438\u0435 (Rotation) Rotation Sepia Test Digital Image Processing \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u0438 \u0412\u043b\u0430\u0432\u0441\u0442\u0432\u0443\u0439 (Divide And Conquer) \u00b6 Closest Pair Of Points Convex Hull Heaps Algorithm Heaps Algorithm Iterative Inversions Max Subarray Sum Mergesort Power Strassen Matrix Multiplication \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 Abbreviation Bitmask Climbing Stairs Coin Change Edit Distance Factorial Fast Fibonacci Fibonacci Floyd Warshall Fractional Knapsack Fractional Knapsack 2 Integer Partition Iterating Through Submasks Knapsack Longest Common Subsequence Longest Increasing Subsequence Longest Increasing Subsequence O(Nlogn) Longest Sub Array Matrix Chain Order Max Non Adjacent Sum Max Sub Array Max Sum Contiguous Subsequence Minimum Cost Path Minimum Partition Optimal Binary Search Tree Rod Cutting Subset Generation Sum Of Subset \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u00b6 Receive File Send File Tests Test Send File \u041d\u0435\u0447\u0451\u0442\u043a\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u00b6 Fuzzy Operations \u0413\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 Basic String \u0413\u0435\u043e\u0434\u0435\u0437\u0438\u044f \u00b6 Haversine Distance Lamberts Ellipsoidal Distance \u0413\u0440\u0430\u0444\u0438\u043a\u0430 \u00b6 Bezier Curve Vector3 For 2D Rendering \u0413\u0440\u0430\u0444\u044b \u00b6 A Star Articulation Points Basic Graphs Bellman Ford Bfs Shortest Path Bidirectional A Star Bidirectional Breadth First Search Breadth First Search Breadth First Search 2 Breadth First Search Shortest Path Check Bipartite Graph Bfs Check Bipartite Graph Dfs Connected Components Depth First Search Depth First Search 2 Dijkstra Dijkstra 2 Dijkstra Algorithm Dinic Directed And Undirected (Weighted) Graph Edmonds Karp Multiple Source And Sink Eulerian Path And Circuit For Undirected Graph Even Tree Finding Bridges Frequent Pattern Graph Miner G Topological Sort Gale Shapley Bigraph Graph List Graph Matrix Graphs Floyd Warshall Greedy Best First Kahns Algorithm Long Kahns Algorithm Topo Karger Minimum Spanning Tree Boruvka Minimum Spanning Tree Kruskal Minimum Spanning Tree Kruskal2 Minimum Spanning Tree Prims Minimum Spanning Tree Prims2 Multi Heuristic Astar Page Rank Prim Scc Kosaraju Strongly Connected Components Tarjans Scc Tests Test Min Spanning Tree Kruskal \u0416\u0430\u0434\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b (Greedy Method) \u00b6 Greedy Knapsack Test Knapsack \u0425\u0435\u0448\u0438 \u00b6 Adler32 Chaos Machine Djb2 Enigma Machine Hamming Code Md5 Sdbm Sha1 \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430 \u00b6 Src Lib Polynom For Points Power Iteration Rayleigh Quotient Test Linear Algebra Transformations 2D \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u00b6 Astar Data Transformations Decision Tree Gaussian Naive Bayes Gradient Boosting Regressor Gradient Descent K Means Clust K Nearest Neighbours Knn Sklearn Linear Discriminant Analysis Linear Regression Logistic Regression Lstm Lstm Prediction Multilayer Perceptron Classifier Polymonial Regression Random Forest Classifier Random Forest Regressor Scoring Functions Sequential Minimum Optimization Support Vector Machines Word Frequency Functions \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u00b6 3N Plus 1 Abs Abs Max Abs Min Add Aliquot Sum Allocation Number Area Area Under Curve Armstrong Numbers Average Mean Average Median Average Mode Bailey Borwein Plouffe Basic Maths Binary Exp Mod Binary Exponentiation Binomial Coefficient Binomial Distribution Bisection Ceil Chudnovsky Algorithm Collatz Sequence Combinations Entropy Eulers Totient Explicit Euler Extended Euclidean Algorithm Factorial Iterative Factorial Python Factorial Recursive Factors Fermat Little Theorem Fibonacci Fibonacci Sequence Recursion Find Max Find Max Recursion Find Min Find Min Recursion Floor Gamma Gaussian Greatest Common Divisor Hardy Ramanujanalgo Is Square Free Jaccard Similarity Kadanes Karatsuba Krishnamurthy Number Kth Lexicographic Permutation Largest Of Very Large Numbers Least Common Multiple Line Length Lucas Lehmer Primality Test Lucas Series Matrix Exponentiation Miller Rabin Mobius Function Modular Exponential Monte Carlo Monte Carlo Dice Newton Raphson Number Of Digits Numerical Integration Perfect Cube Perfect Number Perfect Square Pi Monte Carlo Estimation Polynomial Evaluation Power Using Recursion Prime Check Prime Factors Prime Numbers Prime Sieve Eratosthenes Pythagoras Qr Decomposition Quadratic Equations Complex Numbers Radians Radix2 Fft Relu Runge Kutta Segmented Sieve \u0420\u044f\u0434\u044b Geometric Series Harmonic Series P Series Sieve Of Eratosthenes Simpson Rule Softmax Square Root Sum Of Arithmetic Series Sum Of Digits Sum Of Geometric Progression Test Prime Check Trapezoidal Rule Ugly Numbers Volume Zellers Congruence \u041c\u0430\u0442\u0440\u0438\u0446\u044b \u00b6 Count Islands In Matrix Inverse Of Matrix Matrix Class Matrix Operation Nth Fibonacci Using Matrix Exponentiation Rotate Matrix Searching In Sorted Matrix Sherman Morrison Spiral Print Tests Test Matrix Operation \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u00b6 Ford Fulkerson Minimum Cut \u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u00b6 Back Propagation Neural Network Convolution Neural Network Perceptron \u0414\u0440\u0443\u0433\u043e\u0435 \u00b6 Activity Selection Anagrams Autocomplete Using Trie Binary Exponentiation Binary Exponentiation 2 Detecting English Programmatically Dijkstra Bankers Algorithm Doomsday Euclidean Gcd Fischer Yates Shuffle Frequency Finder Game Of Life Gauss Easter Greedy Integeration By Simpson Approx Largest Subarray Sum Least Recently Used Lfu Cache Linear Congruential Generator Lru Cache Magicdiamondpattern Markov Chain Max Sum Sliding Window Nested Brackets Palindrome Password Generator Primelib Scoring Algorithm Sdes Sierpinski Triangle Tower Of Hanoi Triplet Sum Two Sum Word Patterns \u041f\u0440\u043e\u0435\u043a\u0442 \u042d\u0439\u043b\u0435\u0440 (Project Euler) \u00b6 Problem 01 Sol1 Sol2 Sol3 Sol4 Sol5 Sol6 Sol7 Problem 02 Sol1 Sol2 Sol3 Sol4 Sol5 Problem 03 Sol1 Sol2 Sol3 Problem 04 Sol1 Sol2 Problem 05 Sol1 Sol2 Problem 06 Sol1 Sol2 Sol3 Sol4 Problem 07 Sol1 Sol2 Sol3 Problem 08 Sol1 Sol2 Sol3 Problem 09 Sol1 Sol2 Sol3 Problem 10 Sol1 Sol2 Sol3 Problem 11 Sol1 Sol2 Problem 112 Sol1 Problem 119 Sol1 Problem 12 Sol1 Sol2 Problem 120 Sol1 Problem 125 Sol1 Problem 13 Sol1 Problem 14 Sol1 Sol2 Problem 15 Sol1 Problem 16 Sol1 Sol2 Problem 17 Sol1 Problem 18 Solution Problem 19 Sol1 Problem 191 Sol1 Problem 20 Sol1 Sol2 Sol3 Sol4 Problem 21 Sol1 Problem 22 Sol1 Sol2 Problem 23 Sol1 Problem 234 Sol1 Problem 24 Sol1 Problem 25 Sol1 Sol2 Sol3 Problem 26 Sol1 Problem 27 Sol1 Problem 28 Sol1 Problem 29 Sol1 Problem 30 Sol1 Problem 31 Sol1 Sol2 Problem 32 Sol32 Problem 33 Sol1 Problem 34 Sol1 Problem 35 Sol1 Problem 36 Sol1 Problem 37 Sol1 Problem 39 Sol1 Problem 40 Sol1 Problem 41 Sol1 Problem 42 Solution42 Problem 43 Sol1 Problem 44 Sol1 Problem 45 Sol1 Problem 46 Sol1 Problem 47 Sol1 Problem 48 Sol1 Problem 49 Sol1 Problem 51 Sol1 Problem 52 Sol1 Problem 53 Sol1 Problem 54 Sol1 Test Poker Hand Problem 55 Sol1 Problem 551 Sol1 Problem 56 Sol1 Problem 63 Sol1 Problem 67 Sol1 Problem 69 Sol1 Problem 71 Sol1 Problem 72 Sol1 Problem 76 Sol1 Problem 80 Sol1 Problem 97 Sol1 Problem 99 Sol1 Validate Solutions \u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u00b6 Not Gate Quantum Entanglement Single Qubit Measure \u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 First Come First Served Round Robin Shortest Job First \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u0438\u0441\u043a\u0430 \u00b6 Binary Search Double Linear Search Double Linear Search Recursion Fibonacci Search Hill Climbing Interpolation Search Jump Search Linear Search Quick Select Sentinel Linear Search Simple Binary Search Simulated Annealing Tabu Search Ternary Search \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u00b6 \u0411\u0438\u0441\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bead sort) \u0411\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bitonic Sort) Bogo Sort ((\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0443\u0436\u044c\u044f, \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u044c\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0431\u043e\u043b\u043e\u0442\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) \u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (\u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043a\u043e\u0440\u0437\u0438\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, Bucket sort) \u0428\u0435\u0439\u043a\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Cocktail shaker sort) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0441\u043a\u043e\u0439 (Comb Sort) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u043c (Counting Sort) Cycle Sort Double Sort External Sort Gnome Sort Heap Sort Insertion Sort Iterative Merge Sort Merge Insertion Sort Merge Sort Odd Even Transposition Parallel Odd Even Transposition Single Threaded Pancake Sort Pigeon Sort Pigeonhole Sort Quick Sort Quick Sort 3 Partition Radix Sort Random Normal Distribution Quicksort Random Pivot Quick Sort Recursive Bubble Sort Recursive Insertion Sort Recursive Quick Sort Selection Sort Shell Sort Stooge Sort Strand Sort Tim Sort Topological Sort Tree Sort Unknown Sort Wiggle Sort \u0421\u0442\u0440\u043e\u043a\u0438 \u00b6 Aho Corasick Boyer Moore Search Can String Be Rearranged As Palindrome Capitalize Check Anagrams Check Pangram Is Palindrome Jaro Winkler Knuth Morris Pratt Levenshtein Distance Lower Manacher Min Cost String Conversion Naive String Search Prefix Function Rabin Karp Remove Duplicate Reverse Words Split Upper Word Occurrence Z Function \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0445\u043e\u0434\u0430 \u00b6 Binary Tree Traversals \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u00b6 Co2 Emission Covid Stats Via Xpath Crawl Google Results Current Stock Price Current Weather Daily Horoscope Emails From Url Fetch Bbc News Fetch Github Info Fetch Jobs Get Imdb Top 250 Movies Csv Get Imdbtop Instagram Crawler Recaptcha Verification Slack Message World Covid19 Stats","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/implementations/#python","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430 Python"},{"location":"content/algorithms/implementations/#_1","text":"Bisection Gaussian Elimination In Static Equilibrium Intersection Lu Decomposition Newton Forward Interpolation Newton Method Newton Raphson Secant Method","title":"\u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437"},{"location":"content/algorithms/implementations/#backtracking","text":"All Combinations All Permutations All Subsequences Coloring Hamiltonian Cycle Knight Tour Minimax N Queens N Queens Math Rat In Maze Sudoku Sum Of Subsets","title":"\u041f\u043e\u0438\u0441\u043a \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c (Backtracking)"},{"location":"content/algorithms/implementations/#_2","text":"Binary And Operator Binary Or Operator Binary Xor Operator","title":"\u0411\u0438\u0442\u043e\u0432\u0430\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u044f"},{"location":"content/algorithms/implementations/#_3","text":"Chinese Remainder Theorem Diophantine Equation Modular Division","title":"\u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d"},{"location":"content/algorithms/implementations/#_4","text":"Quine Mc Cluskey","title":"\u0410\u043b\u0433\u0435\u0431\u0440\u0430 \u043b\u043e\u0433\u0438\u043a\u0438"},{"location":"content/algorithms/implementations/#_5","text":"One Dimensional","title":"\u041a\u043b\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u044b"},{"location":"content/algorithms/implementations/#_6","text":"A1Z26 Affine Cipher Atbash Base16 Base32 Base64 Cipher Base85 Brute Force Caesar Cipher Caesar Cipher Cryptomath Module Decrypt Caesar With Chi Squared Deterministic Miller Rabin Diffie Elgamal Key Generator Enigma Machine2 Hill Cipher Mixed Keyword Cypher Morse Code Implementation Onepad Cipher Playfair Cipher Porta Cipher Rabin Miller Rail Fence Cipher Rot13 Rsa Cipher Rsa Factorization Rsa Key Generator Shuffled Shift Cipher Simple Keyword Cypher Simple Substitution Cipher Trafid Cipher Transposition Cipher Transposition Cipher Encrypt Decrypt File Vigenere Cipher Xor Cipher","title":"\u0428\u0438\u0444\u0440\u044b"},{"location":"content/algorithms/implementations/#_7","text":"Burrows Wheeler Huffman Lempel Ziv Lempel Ziv Decompress Peak Signal To Noise Ratio","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0421\u0436\u0430\u0442\u0438\u044f"},{"location":"content/algorithms/implementations/#_8","text":"Harriscorner","title":"\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_9","text":"Binary To Decimal Binary To Octal Decimal To Any Decimal To Binary Decimal To Binary Recursion Decimal To Hexadecimal Decimal To Octal Hexadecimal To Decimal Prefix Conversions Roman To Integer Temperature Conversions","title":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f"},{"location":"content/algorithms/implementations/#_10","text":"\u0414\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (Binary Tree) Avl Tree Basic Binary Tree Binary Search Tree Binary Search Tree Recursive Binary Tree Mirror Fenwick Tree Lazy Segment Tree Lowest Common Ancestor Non Recursive Segment Tree Number Of Possible Binary Trees Red Black Tree Segment Tree Segment Tree Other Treap \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 (Disjoint Set) Alternate Disjoint Set Disjoint Set \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Hashing) Double Hash Hash Table Hash Table With Linked List \u0422\u0435\u043e\u0440\u0438\u044f \u0427\u0438\u0441\u0435\u043b (Number Theory) Prime Numbers Quadratic Probing \u041a\u0443\u0447\u0430 (Heap) Binomial Heap Heap Heap Generic Max Heap Min Heap Randomized Heap \u0421\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 (Linked List) Circular Linked List Deque Doubly Doubly Linked List From Sequence Has Loop Is Palindrome Middle Element Of Linked List Print Reverse Singly Linked List Skip List Swap Nodes \u041e\u0447\u0435\u0440\u0435\u0434\u0438 (Queue) Circular Queue Double Ended Queue Linked Queue Priority Queue Using List Queue On List Queue On Pseudo Stack \u0421\u0442\u0435\u043a\u0438 (Stacks) Balanced Parentheses Dijkstras Two Stack Algorithm Infix To Postfix Conversion Infix To Prefix Conversion Linked Stack Next Greater Element Postfix Evaluation Prefix Evaluation Stack Stack Using Dll Stock Span Problem \u041f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (Trie) Trie","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/implementations/#_11","text":"Change Brightness Change Contrast Convert To Negative \u0414\u0438\u0437\u0435\u0440\u0438\u043d\u0433 (Dithering) Burkes \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 (Edge Detection) Canny \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f (Filters) Bilateral Filter Convolve Gaussian Filter Median Filter Sobel Filter \u042d\u043a\u0432\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c (Histogram Equalization) Histogram Stretch Index Calculation \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 (Resize) Resize \u0412\u0440\u0430\u0449\u0435\u043d\u0438\u0435 (Rotation) Rotation Sepia Test Digital Image Processing","title":"\u0426\u0438\u0444\u0440\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"},{"location":"content/algorithms/implementations/#divide-and-conquer","text":"Closest Pair Of Points Convex Hull Heaps Algorithm Heaps Algorithm Iterative Inversions Max Subarray Sum Mergesort Power Strassen Matrix Multiplication","title":"\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439 \u0438 \u0412\u043b\u0430\u0432\u0441\u0442\u0432\u0443\u0439 (Divide And Conquer)"},{"location":"content/algorithms/implementations/#_12","text":"Abbreviation Bitmask Climbing Stairs Coin Change Edit Distance Factorial Fast Fibonacci Fibonacci Floyd Warshall Fractional Knapsack Fractional Knapsack 2 Integer Partition Iterating Through Submasks Knapsack Longest Common Subsequence Longest Increasing Subsequence Longest Increasing Subsequence O(Nlogn) Longest Sub Array Matrix Chain Order Max Non Adjacent Sum Max Sub Array Max Sum Contiguous Subsequence Minimum Cost Path Minimum Partition Optimal Binary Search Tree Rod Cutting Subset Generation Sum Of Subset","title":"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_13","text":"Receive File Send File Tests Test Send File","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"content/algorithms/implementations/#_14","text":"Fuzzy Operations","title":"\u041d\u0435\u0447\u0451\u0442\u043a\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_15","text":"Basic String","title":"\u0413\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/algorithms/implementations/#_16","text":"Haversine Distance Lamberts Ellipsoidal Distance","title":"\u0413\u0435\u043e\u0434\u0435\u0437\u0438\u044f"},{"location":"content/algorithms/implementations/#_17","text":"Bezier Curve Vector3 For 2D Rendering","title":"\u0413\u0440\u0430\u0444\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_18","text":"A Star Articulation Points Basic Graphs Bellman Ford Bfs Shortest Path Bidirectional A Star Bidirectional Breadth First Search Breadth First Search Breadth First Search 2 Breadth First Search Shortest Path Check Bipartite Graph Bfs Check Bipartite Graph Dfs Connected Components Depth First Search Depth First Search 2 Dijkstra Dijkstra 2 Dijkstra Algorithm Dinic Directed And Undirected (Weighted) Graph Edmonds Karp Multiple Source And Sink Eulerian Path And Circuit For Undirected Graph Even Tree Finding Bridges Frequent Pattern Graph Miner G Topological Sort Gale Shapley Bigraph Graph List Graph Matrix Graphs Floyd Warshall Greedy Best First Kahns Algorithm Long Kahns Algorithm Topo Karger Minimum Spanning Tree Boruvka Minimum Spanning Tree Kruskal Minimum Spanning Tree Kruskal2 Minimum Spanning Tree Prims Minimum Spanning Tree Prims2 Multi Heuristic Astar Page Rank Prim Scc Kosaraju Strongly Connected Components Tarjans Scc Tests Test Min Spanning Tree Kruskal","title":"\u0413\u0440\u0430\u0444\u044b"},{"location":"content/algorithms/implementations/#greedy-method","text":"Greedy Knapsack Test Knapsack","title":"\u0416\u0430\u0434\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b (Greedy Method)"},{"location":"content/algorithms/implementations/#_19","text":"Adler32 Chaos Machine Djb2 Enigma Machine Hamming Code Md5 Sdbm Sha1","title":"\u0425\u0435\u0448\u0438"},{"location":"content/algorithms/implementations/#_20","text":"Src Lib Polynom For Points Power Iteration Rayleigh Quotient Test Linear Algebra Transformations 2D","title":"\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430"},{"location":"content/algorithms/implementations/#_21","text":"Astar Data Transformations Decision Tree Gaussian Naive Bayes Gradient Boosting Regressor Gradient Descent K Means Clust K Nearest Neighbours Knn Sklearn Linear Discriminant Analysis Linear Regression Logistic Regression Lstm Lstm Prediction Multilayer Perceptron Classifier Polymonial Regression Random Forest Classifier Random Forest Regressor Scoring Functions Sequential Minimum Optimization Support Vector Machines Word Frequency Functions","title":"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_22","text":"3N Plus 1 Abs Abs Max Abs Min Add Aliquot Sum Allocation Number Area Area Under Curve Armstrong Numbers Average Mean Average Median Average Mode Bailey Borwein Plouffe Basic Maths Binary Exp Mod Binary Exponentiation Binomial Coefficient Binomial Distribution Bisection Ceil Chudnovsky Algorithm Collatz Sequence Combinations Entropy Eulers Totient Explicit Euler Extended Euclidean Algorithm Factorial Iterative Factorial Python Factorial Recursive Factors Fermat Little Theorem Fibonacci Fibonacci Sequence Recursion Find Max Find Max Recursion Find Min Find Min Recursion Floor Gamma Gaussian Greatest Common Divisor Hardy Ramanujanalgo Is Square Free Jaccard Similarity Kadanes Karatsuba Krishnamurthy Number Kth Lexicographic Permutation Largest Of Very Large Numbers Least Common Multiple Line Length Lucas Lehmer Primality Test Lucas Series Matrix Exponentiation Miller Rabin Mobius Function Modular Exponential Monte Carlo Monte Carlo Dice Newton Raphson Number Of Digits Numerical Integration Perfect Cube Perfect Number Perfect Square Pi Monte Carlo Estimation Polynomial Evaluation Power Using Recursion Prime Check Prime Factors Prime Numbers Prime Sieve Eratosthenes Pythagoras Qr Decomposition Quadratic Equations Complex Numbers Radians Radix2 Fft Relu Runge Kutta Segmented Sieve \u0420\u044f\u0434\u044b Geometric Series Harmonic Series P Series Sieve Of Eratosthenes Simpson Rule Softmax Square Root Sum Of Arithmetic Series Sum Of Digits Sum Of Geometric Progression Test Prime Check Trapezoidal Rule Ugly Numbers Volume Zellers Congruence","title":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430"},{"location":"content/algorithms/implementations/#_23","text":"Count Islands In Matrix Inverse Of Matrix Matrix Class Matrix Operation Nth Fibonacci Using Matrix Exponentiation Rotate Matrix Searching In Sorted Matrix Sherman Morrison Spiral Print Tests Test Matrix Operation","title":"\u041c\u0430\u0442\u0440\u0438\u0446\u044b"},{"location":"content/algorithms/implementations/#_24","text":"Ford Fulkerson Minimum Cut","title":"\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"},{"location":"content/algorithms/implementations/#_25","text":"Back Propagation Neural Network Convolution Neural Network Perceptron","title":"\u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"},{"location":"content/algorithms/implementations/#_26","text":"Activity Selection Anagrams Autocomplete Using Trie Binary Exponentiation Binary Exponentiation 2 Detecting English Programmatically Dijkstra Bankers Algorithm Doomsday Euclidean Gcd Fischer Yates Shuffle Frequency Finder Game Of Life Gauss Easter Greedy Integeration By Simpson Approx Largest Subarray Sum Least Recently Used Lfu Cache Linear Congruential Generator Lru Cache Magicdiamondpattern Markov Chain Max Sum Sliding Window Nested Brackets Palindrome Password Generator Primelib Scoring Algorithm Sdes Sierpinski Triangle Tower Of Hanoi Triplet Sum Two Sum Word Patterns","title":"\u0414\u0440\u0443\u0433\u043e\u0435"},{"location":"content/algorithms/implementations/#project-euler","text":"Problem 01 Sol1 Sol2 Sol3 Sol4 Sol5 Sol6 Sol7 Problem 02 Sol1 Sol2 Sol3 Sol4 Sol5 Problem 03 Sol1 Sol2 Sol3 Problem 04 Sol1 Sol2 Problem 05 Sol1 Sol2 Problem 06 Sol1 Sol2 Sol3 Sol4 Problem 07 Sol1 Sol2 Sol3 Problem 08 Sol1 Sol2 Sol3 Problem 09 Sol1 Sol2 Sol3 Problem 10 Sol1 Sol2 Sol3 Problem 11 Sol1 Sol2 Problem 112 Sol1 Problem 119 Sol1 Problem 12 Sol1 Sol2 Problem 120 Sol1 Problem 125 Sol1 Problem 13 Sol1 Problem 14 Sol1 Sol2 Problem 15 Sol1 Problem 16 Sol1 Sol2 Problem 17 Sol1 Problem 18 Solution Problem 19 Sol1 Problem 191 Sol1 Problem 20 Sol1 Sol2 Sol3 Sol4 Problem 21 Sol1 Problem 22 Sol1 Sol2 Problem 23 Sol1 Problem 234 Sol1 Problem 24 Sol1 Problem 25 Sol1 Sol2 Sol3 Problem 26 Sol1 Problem 27 Sol1 Problem 28 Sol1 Problem 29 Sol1 Problem 30 Sol1 Problem 31 Sol1 Sol2 Problem 32 Sol32 Problem 33 Sol1 Problem 34 Sol1 Problem 35 Sol1 Problem 36 Sol1 Problem 37 Sol1 Problem 39 Sol1 Problem 40 Sol1 Problem 41 Sol1 Problem 42 Solution42 Problem 43 Sol1 Problem 44 Sol1 Problem 45 Sol1 Problem 46 Sol1 Problem 47 Sol1 Problem 48 Sol1 Problem 49 Sol1 Problem 51 Sol1 Problem 52 Sol1 Problem 53 Sol1 Problem 54 Sol1 Test Poker Hand Problem 55 Sol1 Problem 551 Sol1 Problem 56 Sol1 Problem 63 Sol1 Problem 67 Sol1 Problem 69 Sol1 Problem 71 Sol1 Problem 72 Sol1 Problem 76 Sol1 Problem 80 Sol1 Problem 97 Sol1 Problem 99 Sol1 Validate Solutions","title":"\u041f\u0440\u043e\u0435\u043a\u0442 \u042d\u0439\u043b\u0435\u0440 (Project Euler)"},{"location":"content/algorithms/implementations/#_27","text":"Not Gate Quantum Entanglement Single Qubit Measure","title":"\u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"},{"location":"content/algorithms/implementations/#_28","text":"First Come First Served Round Robin Shortest Job First","title":"\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"content/algorithms/implementations/#_29","text":"Binary Search Double Linear Search Double Linear Search Recursion Fibonacci Search Hill Climbing Interpolation Search Jump Search Linear Search Quick Select Sentinel Linear Search Simple Binary Search Simulated Annealing Tabu Search Ternary Search","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u0438\u0441\u043a\u0430"},{"location":"content/algorithms/implementations/#_30","text":"\u0411\u0438\u0441\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bead sort) \u0411\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bitonic Sort) Bogo Sort ((\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0443\u0436\u044c\u044f, \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u044c\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0431\u043e\u043b\u043e\u0442\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) \u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (\u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043a\u043e\u0440\u0437\u0438\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, Bucket sort) \u0428\u0435\u0439\u043a\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Cocktail shaker sort) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0441\u043a\u043e\u0439 (Comb Sort) \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u043c (Counting Sort) Cycle Sort Double Sort External Sort Gnome Sort Heap Sort Insertion Sort Iterative Merge Sort Merge Insertion Sort Merge Sort Odd Even Transposition Parallel Odd Even Transposition Single Threaded Pancake Sort Pigeon Sort Pigeonhole Sort Quick Sort Quick Sort 3 Partition Radix Sort Random Normal Distribution Quicksort Random Pivot Quick Sort Recursive Bubble Sort Recursive Insertion Sort Recursive Quick Sort Selection Sort Shell Sort Stooge Sort Strand Sort Tim Sort Topological Sort Tree Sort Unknown Sort Wiggle Sort","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438"},{"location":"content/algorithms/implementations/#_31","text":"Aho Corasick Boyer Moore Search Can String Be Rearranged As Palindrome Capitalize Check Anagrams Check Pangram Is Palindrome Jaro Winkler Knuth Morris Pratt Levenshtein Distance Lower Manacher Min Cost String Conversion Naive String Search Prefix Function Rabin Karp Remove Duplicate Reverse Words Split Upper Word Occurrence Z Function","title":"\u0421\u0442\u0440\u043e\u043a\u0438"},{"location":"content/algorithms/implementations/#_32","text":"Binary Tree Traversals","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0431\u0445\u043e\u0434\u0430"},{"location":"content/algorithms/implementations/#-","text":"Co2 Emission Covid Stats Via Xpath Crawl Google Results Current Stock Price Current Weather Daily Horoscope Emails From Url Fetch Bbc News Fetch Github Info Fetch Jobs Get Imdb Top 250 Movies Csv Get Imdbtop Instagram Crawler Recaptcha Verification Slack Message World Covid19 Stats","title":"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430"},{"location":"content/algorithms/implementations/bit_manipulation/","text":"https://wiki.python.org/moin/BitManipulation https://wiki.python.org/moin/BitwiseOperators https://www.tutorialspoint.com/python3/bitwise_operators_example.htm","title":"Index"},{"location":"content/algorithms/implementations/cellular_automata/","text":"Cellular Automata \u00b6 https://en.wikipedia.org/wiki/Cellular_automaton https://mathworld.wolfram.com/ElementaryCellularAutomaton.html","title":"Cellular Automata"},{"location":"content/algorithms/implementations/cellular_automata/#cellular-automata","text":"https://en.wikipedia.org/wiki/Cellular_automaton https://mathworld.wolfram.com/ElementaryCellularAutomaton.html","title":"Cellular Automata"},{"location":"content/algorithms/implementations/computer_vision/","text":"Computer Vision \u00b6 Computer vision is a field of computer science that works on enabling computers to see, identify and process images in the same way that human vision does, and then provide appropriate output. It is like imparting human intelligence and instincts to a computer. Image processing and computer vision are a little different from each other. Image processing means applying some algorithms for transforming image from one form to the other like smoothing, contrasting, stretching, etc. While computer vision comes from modelling image processing using the techniques of machine learning, computer vision applies machine learning to recognize patterns for interpretation of images (much like the process of visual reasoning of human vision).","title":"Index"},{"location":"content/algorithms/implementations/computer_vision/#computer-vision","text":"Computer vision is a field of computer science that works on enabling computers to see, identify and process images in the same way that human vision does, and then provide appropriate output. It is like imparting human intelligence and instincts to a computer. Image processing and computer vision are a little different from each other. Image processing means applying some algorithms for transforming image from one form to the other like smoothing, contrasting, stretching, etc. While computer vision comes from modelling image processing using the techniques of machine learning, computer vision applies machine learning to recognize patterns for interpretation of images (much like the process of visual reasoning of human vision).","title":"Computer Vision"},{"location":"content/algorithms/implementations/linear_algebra/","text":"Linear algebra library for Python \u00b6 This module contains classes and functions for doing linear algebra. Overview \u00b6 class Vector \u00b6 - - This class represents a vector of arbitrary size and related operations. ** Overview about the methods : ** - constructor ( components : list ) : init the vector - set ( components : list ) : changes the vector components . - \\ _ \\ _str \\ _ \\ _ () : toString method - component ( i : int ): gets the i - th component ( start by 0 ) - \\ _ \\ _len \\ _ \\ _ () : gets the size / length of the vector ( number of components ) - euclidLength () : returns the eulidean length of the vector . - operator + : vector addition - operator - : vector subtraction - operator * : scalar multiplication and dot product - copy () : copies this vector and returns it . - changeComponent ( pos , value ) : changes the specified component . function zeroVector(dimension) returns a zero vector of 'dimension' function unitBasisVector(dimension,pos) returns a unit basis vector with a One at index 'pos' (indexing at 0) function axpy(scalar,vector1,vector2) computes the axpy operation function randomVector(N,a,b) returns a random vector of size N, with random integer components between 'a' and 'b'. class Matrix \u00b6 - - This class represents a matrix of arbitrary size and operations on it. ** Overview about the methods : ** - \\ _ \\ _str \\ _ \\ _ () : returns a string representation - operator * : implements the matrix vector multiplication implements the matrix - scalar multiplication . - changeComponent ( x , y , value ) : changes the specified component . - component ( x , y ) : returns the specified component . - width () : returns the width of the matrix - height () : returns the height of the matrix - determinate () : returns the determinate of the matrix if it is square - operator + : implements the matrix - addition . - operator - _ implements the matrix - subtraction function squareZeroMatrix(N) returns a square zero-matrix of dimension NxN function randomMatrix(W,H,a,b) returns a random matrix WxH with integer components between 'a' and 'b' Documentation \u00b6 This module uses docstrings to enable the use of Python's in-built help(...) function. For instance, try help(Vector) , help(unitBasisVector) , and help(CLASSNAME.METHODNAME) . Usage \u00b6 Import the module lib.py from the src directory into your project. Alternatively, you can directly use the Python bytecode file lib.pyc . Tests \u00b6 src/tests.py contains Python unit tests which can be run with python3 -m unittest -v .","title":"Linear algebra library for Python"},{"location":"content/algorithms/implementations/linear_algebra/#linear-algebra-library-for-python","text":"This module contains classes and functions for doing linear algebra.","title":"Linear algebra library for Python"},{"location":"content/algorithms/implementations/linear_algebra/#overview","text":"","title":"Overview"},{"location":"content/algorithms/implementations/linear_algebra/#class-vector","text":"- - This class represents a vector of arbitrary size and related operations. ** Overview about the methods : ** - constructor ( components : list ) : init the vector - set ( components : list ) : changes the vector components . - \\ _ \\ _str \\ _ \\ _ () : toString method - component ( i : int ): gets the i - th component ( start by 0 ) - \\ _ \\ _len \\ _ \\ _ () : gets the size / length of the vector ( number of components ) - euclidLength () : returns the eulidean length of the vector . - operator + : vector addition - operator - : vector subtraction - operator * : scalar multiplication and dot product - copy () : copies this vector and returns it . - changeComponent ( pos , value ) : changes the specified component . function zeroVector(dimension) returns a zero vector of 'dimension' function unitBasisVector(dimension,pos) returns a unit basis vector with a One at index 'pos' (indexing at 0) function axpy(scalar,vector1,vector2) computes the axpy operation function randomVector(N,a,b) returns a random vector of size N, with random integer components between 'a' and 'b'.","title":"class Vector"},{"location":"content/algorithms/implementations/linear_algebra/#class-matrix","text":"- - This class represents a matrix of arbitrary size and operations on it. ** Overview about the methods : ** - \\ _ \\ _str \\ _ \\ _ () : returns a string representation - operator * : implements the matrix vector multiplication implements the matrix - scalar multiplication . - changeComponent ( x , y , value ) : changes the specified component . - component ( x , y ) : returns the specified component . - width () : returns the width of the matrix - height () : returns the height of the matrix - determinate () : returns the determinate of the matrix if it is square - operator + : implements the matrix - addition . - operator - _ implements the matrix - subtraction function squareZeroMatrix(N) returns a square zero-matrix of dimension NxN function randomMatrix(W,H,a,b) returns a random matrix WxH with integer components between 'a' and 'b'","title":"class Matrix"},{"location":"content/algorithms/implementations/linear_algebra/#documentation","text":"This module uses docstrings to enable the use of Python's in-built help(...) function. For instance, try help(Vector) , help(unitBasisVector) , and help(CLASSNAME.METHODNAME) .","title":"Documentation"},{"location":"content/algorithms/implementations/linear_algebra/#usage","text":"Import the module lib.py from the src directory into your project. Alternatively, you can directly use the Python bytecode file lib.pyc .","title":"Usage"},{"location":"content/algorithms/implementations/linear_algebra/#tests","text":"src/tests.py contains Python unit tests which can be run with python3 -m unittest -v .","title":"Tests"},{"location":"content/algorithms/implementations/project_euler/","text":"ProjectEuler \u00b6 Problems are taken from https://projecteuler.net/. Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Project Euler is ideal for mathematicians who are learning to code. Here the efficiency of your code is also checked. I've tried to provide all the best possible solutions. For description of the problem statements, kindly visit https://projecteuler.net/show=all","title":"ProjectEuler"},{"location":"content/algorithms/implementations/project_euler/#projecteuler","text":"Problems are taken from https://projecteuler.net/. Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Project Euler is ideal for mathematicians who are learning to code. Here the efficiency of your code is also checked. I've tried to provide all the best possible solutions. For description of the problem statements, kindly visit https://projecteuler.net/show=all","title":"ProjectEuler"},{"location":"content/algorithms/implementations/quantum/","text":"Welcome to Quantum Algorithms \u00b6 Started at https://github.com/TheAlgorithms/Python/issues/1831 D-Wave: https://www.dwavesys.com and https://github.com/dwavesystems Google: https://research.google/teams/applied-science/quantum IBM: https://qiskit.org and https://github.com/Qiskit Rigetti: https://rigetti.com and https://github.com/rigetti","title":"Welcome to Quantum Algorithms"},{"location":"content/algorithms/implementations/quantum/#welcome-to-quantum-algorithms","text":"Started at https://github.com/TheAlgorithms/Python/issues/1831 D-Wave: https://www.dwavesys.com and https://github.com/dwavesystems Google: https://research.google/teams/applied-science/quantum IBM: https://qiskit.org and https://github.com/Qiskit Rigetti: https://rigetti.com and https://github.com/rigetti","title":"Welcome to Quantum Algorithms"},{"location":"content/algorithms/implementations/sorts/bead_sort/","text":"\u0411\u0438\u0441\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bead sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0414\u0440\u0443\u0433 \u043f\u043e\u0434 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u044b\u043b\u043e\u0436\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0438\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0448\u0430\u0440\u0438\u043a\u043e\u0432. \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0433\u043b\u044f\u0434\u0438\u043c \u043d\u0430 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0448\u0430\u0440\u0438\u043a\u043e\u0432 \u043d\u0435 \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044f\u043c, \u0430 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044f\u043c. \u0421\u0434\u0432\u0438\u043d\u0435\u043c \u0448\u0430\u0440\u0438\u043a\u0438 \u0432\u043d\u0438\u0437 \u0434\u043e \u0443\u043f\u043e\u0440\u0430. \u0421\u043d\u043e\u0432\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0431\u0443\u0441\u0438\u043d\u043a\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u044f\u0434\u0443. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0438\u0441\u0435\u043b, \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 O(1) - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0441\u0444\u0435\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f Bead sort \u0432 \u0432\u0430\u043a\u0443\u0443\u043c\u0435. \u0415\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u044b\u0435 \u0448\u0430\u0440\u0438\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0434\u0432\u0438\u0433\u0430\u044e\u0442\u0441\u044f \u0438 \u0432\u0441\u0442\u0430\u044e\u0442 \u043d\u0430 \u0441\u0432\u043e\u0438 \u043c\u0435\u0441\u0442\u0430. \u042d\u0442\u043e \u043d\u0435\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u2013 \u043d\u0438 \u0432 \u0442\u0435\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u043d\u0438 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435. O(\u221aN) - \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043b\u044f \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0434\u0435 \u0431\u0443\u0441\u0438\u043d\u043a\u0438 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0442 \u0432\u043d\u0438\u0437 \u043f\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043c\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0446\u0430\u043c. \u0412\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0440\u043d\u044e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0441\u043e\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043a\u0440\u0430\u0442\u043d\u0430 N . O(N) - \u0428\u0430\u0440\u0438\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0451 \u043d\u0435 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0441\u0432\u043e\u0438\u0445 \u043c\u0435\u0441\u0442, \u0434\u0440\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043d\u0438\u0437 \u0437\u0430 \u043e\u0434\u043d\u0443 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e. \u041e\u0431 \u044d\u0442\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0443\u043c\u0435\u0441\u0442\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0445 \u0442\u0430\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0445 \u0438\u043b\u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. O(S) - S \u2013 \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041a\u0430\u0436\u0434\u044b\u0439 \u0448\u0430\u0440\u0438\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u0448\u0430\u0440\u0438\u043a\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0410\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(N 2 ) \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Bead sort only works for sequences of nonegative integers. https://en.wikipedia.org/wiki/Bead_sort \"\"\" def bead_sort ( sequence : list ) -> list : \"\"\" >>> bead_sort([6, 11, 12, 4, 1, 5]) [1, 4, 5, 6, 11, 12] >>> bead_sort([9, 8, 7, 6, 5, 4 ,3, 2, 1]) [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> bead_sort([5, 0, 4, 3]) [0, 3, 4, 5] >>> bead_sort([8, 2, 1]) [1, 2, 8] >>> bead_sort([1, .9, 0.0, 0, -1, -.9]) Traceback (most recent call last): ... TypeError: Sequence must be list of nonnegative integers >>> bead_sort(\"Hello world\") Traceback (most recent call last): ... TypeError: Sequence must be list of nonnegative integers \"\"\" if any ( not isinstance ( x , int ) or x < 0 for x in sequence ): raise TypeError ( \"Sequence must be list of nonnegative integers\" ) for _ in range ( len ( sequence )): for i , ( rod_upper , rod_lower ) in enumerate ( zip ( sequence , sequence [ 1 :])): if rod_upper > rod_lower : sequence [ i ] -= rod_upper - rod_lower sequence [ i + 1 ] += rod_upper - rod_lower return sequence if __name__ == \"__main__\" : assert bead_sort ([ 5 , 4 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert bead_sort ([ 7 , 9 , 4 , 3 , 5 ]) == [ 3 , 4 , 5 , 7 , 9 ] \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u00b6 \u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043d\u0430 habr.com \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 30+ \u044f\u0437\u044b\u043a\u0430\u0445 Wiki","title":"\u0411\u0438\u0441\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bead sort)"},{"location":"content/algorithms/implementations/sorts/bead_sort/#bead-sort","text":"","title":"\u0411\u0438\u0441\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bead sort)"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_1","text":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0414\u0440\u0443\u0433 \u043f\u043e\u0434 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u044b\u043b\u043e\u0436\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0438\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0448\u0430\u0440\u0438\u043a\u043e\u0432. \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0433\u043b\u044f\u0434\u0438\u043c \u043d\u0430 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0448\u0430\u0440\u0438\u043a\u043e\u0432 \u043d\u0435 \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044f\u043c, \u0430 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044f\u043c. \u0421\u0434\u0432\u0438\u043d\u0435\u043c \u0448\u0430\u0440\u0438\u043a\u0438 \u0432\u043d\u0438\u0437 \u0434\u043e \u0443\u043f\u043e\u0440\u0430. \u0421\u043d\u043e\u0432\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0431\u0443\u0441\u0438\u043d\u043a\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u044f\u0434\u0443. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0438\u0441\u0435\u043b, \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_2","text":"O(1) - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0441\u0444\u0435\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f Bead sort \u0432 \u0432\u0430\u043a\u0443\u0443\u043c\u0435. \u0415\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u044b\u0435 \u0448\u0430\u0440\u0438\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441\u0434\u0432\u0438\u0433\u0430\u044e\u0442\u0441\u044f \u0438 \u0432\u0441\u0442\u0430\u044e\u0442 \u043d\u0430 \u0441\u0432\u043e\u0438 \u043c\u0435\u0441\u0442\u0430. \u042d\u0442\u043e \u043d\u0435\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u2013 \u043d\u0438 \u0432 \u0442\u0435\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u043d\u0438 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435. O(\u221aN) - \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043b\u044f \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0434\u0435 \u0431\u0443\u0441\u0438\u043d\u043a\u0438 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0442 \u0432\u043d\u0438\u0437 \u043f\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043c\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0446\u0430\u043c. \u0412\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0440\u043d\u044e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u044b\u0441\u043e\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043a\u0440\u0430\u0442\u043d\u0430 N . O(N) - \u0428\u0430\u0440\u0438\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0451 \u043d\u0435 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0441\u0432\u043e\u0438\u0445 \u043c\u0435\u0441\u0442, \u0434\u0440\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043d\u0438\u0437 \u0437\u0430 \u043e\u0434\u043d\u0443 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e. \u041e\u0431 \u044d\u0442\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0443\u043c\u0435\u0441\u0442\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0445 \u0442\u0430\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0445 \u0438\u043b\u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. O(S) - S \u2013 \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u041a\u0430\u0436\u0434\u044b\u0439 \u0448\u0430\u0440\u0438\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u0448\u0430\u0440\u0438\u043a\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0410\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(N 2 )","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_3","text":"\"\"\" Bead sort only works for sequences of nonegative integers. https://en.wikipedia.org/wiki/Bead_sort \"\"\" def bead_sort ( sequence : list ) -> list : \"\"\" >>> bead_sort([6, 11, 12, 4, 1, 5]) [1, 4, 5, 6, 11, 12] >>> bead_sort([9, 8, 7, 6, 5, 4 ,3, 2, 1]) [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> bead_sort([5, 0, 4, 3]) [0, 3, 4, 5] >>> bead_sort([8, 2, 1]) [1, 2, 8] >>> bead_sort([1, .9, 0.0, 0, -1, -.9]) Traceback (most recent call last): ... TypeError: Sequence must be list of nonnegative integers >>> bead_sort(\"Hello world\") Traceback (most recent call last): ... TypeError: Sequence must be list of nonnegative integers \"\"\" if any ( not isinstance ( x , int ) or x < 0 for x in sequence ): raise TypeError ( \"Sequence must be list of nonnegative integers\" ) for _ in range ( len ( sequence )): for i , ( rod_upper , rod_lower ) in enumerate ( zip ( sequence , sequence [ 1 :])): if rod_upper > rod_lower : sequence [ i ] -= rod_upper - rod_lower sequence [ i + 1 ] += rod_upper - rod_lower return sequence if __name__ == \"__main__\" : assert bead_sort ([ 5 , 4 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert bead_sort ([ 7 , 9 , 4 , 3 , 5 ]) == [ 3 , 4 , 5 , 7 , 9 ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_4","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bead_sort/#_5","text":"\u041e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043d\u0430 habr.com \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 30+ \u044f\u0437\u044b\u043a\u0430\u0445 Wiki","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/","text":"\u0411\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bitonic sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0418\u0434\u0435\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0431\u0438\u0442\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2013 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442, \u0430 \u043f\u043e\u0442\u043e\u043c \u0443\u0431\u044b\u0432\u0430\u0435\u0442. \u0415\u0435 \u043c\u043e\u0436\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u0440\u0430\u0432\u043d\u044b\u0435 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0443 \u0438\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2013 \u0440\u0430\u0432\u043d\u044b\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0443. \u0423\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0441\u044f \u0434\u0432\u0435 \u0431\u0438\u0442\u043e\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0442\u0430\u043a \u043a\u0430\u043a \u043b\u044e\u0431\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u043b\u044e\u0431\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e). \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0431\u0438\u0442\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u0438\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043f\u043e\u043b\u0430\u043c, \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u043c \u043e\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043e\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0432\u0442\u043e\u0440\u0443\u044e \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0441\u043a\u043b\u0435\u0438\u043c. \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0431\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u0435\u043d \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438 , \u0442\u0430\u043a \u0447\u0442\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0444\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0447\u0442\u043e \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0443). \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 O(N log 2 N) , \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u0431\u0438\u0442\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0443\u044e \u0437\u0430 O(N LogN) , \u0430 \u0432\u0441\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u0431\u044b\u043b\u043e LogN . \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 # Python program for Bitonic Sort. Note that this program # works only when size of input is a power of 2. # The parameter dir indicates the sorting direction, ASCENDING # or DESCENDING; if (a[i] > a[j]) agrees with the direction, # then a[i] and a[j] are interchanged. def compAndSwap ( a , i , j , dire ): if ( dire == 1 and a [ i ] > a [ j ]) or ( dire == 0 and a [ i ] < a [ j ]): a [ i ], a [ j ] = a [ j ], a [ i ] # It recursively sorts a bitonic sequence in ascending order, # if dir = 1, and in descending order otherwise (means dir=0). # The sequence to be sorted starts at index position low, # the parameter cnt is the number of elements to be sorted. def bitonic_merge ( a , low , cnt , dire ): if cnt > 1 : k = int ( cnt / 2 ) for i in range ( low , low + k ): compAndSwap ( a , i , i + k , dire ) bitonic_merge ( a , low , k , dire ) bitonic_merge ( a , low + k , k , dire ) # This function first produces a bitonic sequence by recursively # sorting its two halves in opposite sorting orders, and then # calls bitonic_merge to make them in the same order def bitonic_sort ( a , low , cnt , dire ): if cnt > 1 : k = int ( cnt / 2 ) bitonic_sort ( a , low , k , 1 ) bitonic_sort ( a , low + k , k , 0 ) bitonic_merge ( a , low , cnt , dire ) # Caller of bitonic_sort for sorting the entire array of length N # in ASCENDING order def sort ( a , N , up ): bitonic_sort ( a , 0 , N , up ) if __name__ == \"__main__\" : a = [] n = int ( input () . strip ()) for i in range ( n ): a . append ( int ( input () . strip ())) up = 1 sort ( a , n , up ) print ( \" \\n\\n Sorted array is\" ) for i in range ( n ): print ( \" %d \" % a [ i ])","title":"\u0411\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bitonic sort)"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#bitonic-sort","text":"","title":"\u0411\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Bitonic sort)"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#_1","text":"\u0418\u0434\u0435\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0431\u0438\u0442\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2013 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442, \u0430 \u043f\u043e\u0442\u043e\u043c \u0443\u0431\u044b\u0432\u0430\u0435\u0442. \u0415\u0435 \u043c\u043e\u0436\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u0440\u0430\u0432\u043d\u044b\u0435 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0443 \u0438\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2013 \u0440\u0430\u0432\u043d\u044b\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0443. \u0423\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0441\u044f \u0434\u0432\u0435 \u0431\u0438\u0442\u043e\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0442\u0430\u043a \u043a\u0430\u043a \u043b\u044e\u0431\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u043b\u044e\u0431\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e). \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0431\u0438\u0442\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0435\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u0438\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043f\u043e\u043b\u0430\u043c, \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0432\u044b\u0437\u043e\u0432\u0435\u043c \u043e\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u043e\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0432\u0442\u043e\u0440\u0443\u044e \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0441\u043a\u043b\u0435\u0438\u043c. \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0431\u0438\u0442\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u0435\u043d \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438 , \u0442\u0430\u043a \u0447\u0442\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0444\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0447\u0442\u043e \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0443).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#_2","text":"O(N log 2 N) , \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u0431\u0438\u0442\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0443\u044e \u0437\u0430 O(N LogN) , \u0430 \u0432\u0441\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u0431\u044b\u043b\u043e LogN .","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bitonic_sort/#_3","text":"# Python program for Bitonic Sort. Note that this program # works only when size of input is a power of 2. # The parameter dir indicates the sorting direction, ASCENDING # or DESCENDING; if (a[i] > a[j]) agrees with the direction, # then a[i] and a[j] are interchanged. def compAndSwap ( a , i , j , dire ): if ( dire == 1 and a [ i ] > a [ j ]) or ( dire == 0 and a [ i ] < a [ j ]): a [ i ], a [ j ] = a [ j ], a [ i ] # It recursively sorts a bitonic sequence in ascending order, # if dir = 1, and in descending order otherwise (means dir=0). # The sequence to be sorted starts at index position low, # the parameter cnt is the number of elements to be sorted. def bitonic_merge ( a , low , cnt , dire ): if cnt > 1 : k = int ( cnt / 2 ) for i in range ( low , low + k ): compAndSwap ( a , i , i + k , dire ) bitonic_merge ( a , low , k , dire ) bitonic_merge ( a , low + k , k , dire ) # This function first produces a bitonic sequence by recursively # sorting its two halves in opposite sorting orders, and then # calls bitonic_merge to make them in the same order def bitonic_sort ( a , low , cnt , dire ): if cnt > 1 : k = int ( cnt / 2 ) bitonic_sort ( a , low , k , 1 ) bitonic_sort ( a , low + k , k , 0 ) bitonic_merge ( a , low , cnt , dire ) # Caller of bitonic_sort for sorting the entire array of length N # in ASCENDING order def sort ( a , N , up ): bitonic_sort ( a , 0 , N , up ) if __name__ == \"__main__\" : a = [] n = int ( input () . strip ()) for i in range ( n ): a . append ( int ( input () . strip ())) up = 1 sort ( a , n , up ) print ( \" \\n\\n Sorted array is\" ) for i in range ( n ): print ( \" %d \" % a [ i ])","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bogo_sort/","text":"Bogo Sort (\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0443\u0436\u044c\u044f, \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u044c\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0431\u043e\u043b\u043e\u0442\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the bogosort algorithm, also known as permutation sort, stupid sort, slowsort, shotgun sort, or monkey sort. Bogosort generates random permutations until it guesses the correct one. More info on: https://en.wikipedia.org/wiki/Bogosort For doctests run following command: python -m doctest -v bogo_sort.py or python3 -m doctest -v bogo_sort.py For manual testing run: python bogo_sort.py \"\"\" import random def bogo_sort ( collection ): \"\"\"Pure implementation of the bogosort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> bogo_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> bogo_sort([]) [] >>> bogo_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def is_sorted ( collection ): if len ( collection ) < 2 : return True for i in range ( len ( collection ) - 1 ): if collection [ i ] > collection [ i + 1 ]: return False return True while not is_sorted ( collection ): random . shuffle ( collection ) return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( bogo_sort ( unsorted ))","title":"Bogo Sort (\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0443\u0436\u044c\u044f, \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u044c\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0431\u043e\u043b\u043e\u0442\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430)"},{"location":"content/algorithms/implementations/sorts/bogo_sort/#bogo-sort","text":"","title":"Bogo Sort (\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0443\u0436\u044c\u044f, \u043e\u0431\u0435\u0437\u044c\u044f\u043d\u044c\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u0431\u043e\u043b\u043e\u0442\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430)"},{"location":"content/algorithms/implementations/sorts/bogo_sort/#_1","text":"\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bogo_sort/#_2","text":"\"\"\" This is a pure Python implementation of the bogosort algorithm, also known as permutation sort, stupid sort, slowsort, shotgun sort, or monkey sort. Bogosort generates random permutations until it guesses the correct one. More info on: https://en.wikipedia.org/wiki/Bogosort For doctests run following command: python -m doctest -v bogo_sort.py or python3 -m doctest -v bogo_sort.py For manual testing run: python bogo_sort.py \"\"\" import random def bogo_sort ( collection ): \"\"\"Pure implementation of the bogosort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> bogo_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> bogo_sort([]) [] >>> bogo_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def is_sorted ( collection ): if len ( collection ) < 2 : return True for i in range ( len ( collection ) - 1 ): if collection [ i ] > collection [ i + 1 ]: return False return True while not is_sorted ( collection ): random . shuffle ( collection ) return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( bogo_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u043e\u0432 \u043f\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0443. \u0417\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0445\u043e\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u0438, \u0435\u0441\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u043f\u0430\u0440\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u043c\u0435\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u043e\u0445\u043e\u0434\u044b \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f N-1 \u0440\u0430\u0437 \u0438\u043b\u0438 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0435 \u043d\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0431\u043c\u0435\u043d\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d. \u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043f\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u0446\u0438\u043a\u043b\u0443, \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0432\u043e\u0451 \u043c\u0435\u0441\u0442\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u044f\u0434\u043e\u043c \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u00ab\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c\u00bb, \u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u00ab\u0432\u0441\u043f\u043b\u044b\u0432\u0430\u0435\u0442\u00bb \u0434\u043e \u043d\u0443\u0436\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0443\u0437\u044b\u0440\u0451\u043a \u0432 \u0432\u043e\u0434\u0435, \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430). \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0425\u0443\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u041b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n) \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(1) \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def bubble_sort ( collection ): \"\"\"Pure implementation of bubble sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> bubble_sort([0, 5, 2, 3, 2]) [0, 2, 2, 3, 5] >>> bubble_sort([0, 5, 2, 3, 2]) == sorted([0, 5, 2, 3, 2]) True >>> bubble_sort([]) == sorted([]) True >>> bubble_sort([-2, -45, -5]) == sorted([-2, -45, -5]) True >>> bubble_sort([-23, 0, 6, -4, 34]) == sorted([-23, 0, 6, -4, 34]) True >>> bubble_sort(['d', 'a', 'b', 'e', 'c']) == sorted(['d', 'a', 'b', 'e', 'c']) True >>> import random >>> collection = random.sample(range(-50, 50), 100) >>> bubble_sort(collection) == sorted(collection) True >>> import string >>> collection = random.choices(string.ascii_letters + string.digits, k=100) >>> bubble_sort(collection) == sorted(collection) True \"\"\" length = len ( collection ) for i in range ( length - 1 ): swapped = False for j in range ( length - 1 - i ): if collection [ j ] > collection [ j + 1 ]: swapped = True collection [ j ], collection [ j + 1 ] = collection [ j + 1 ], collection [ j ] if not swapped : break # Stop iteration if the collection is sorted. return collection if __name__ == \"__main__\" : import doctest import time doctest . testmod () user_input = input ( \"Enter numbers separated by a comma:\" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] start = time . process_time () print ( * bubble_sort ( unsorted ), sep = \",\" ) print ( f \"Processing time: { time . process_time () - start } \" ) \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort)"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#bubble-sort","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c (Bubble Sort)"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_1","text":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u043e\u0432 \u043f\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0443. \u0417\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0445\u043e\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u0438, \u0435\u0441\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u043f\u0430\u0440\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u043c\u0435\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u043e\u0445\u043e\u0434\u044b \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f N-1 \u0440\u0430\u0437 \u0438\u043b\u0438 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0435 \u043d\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0431\u043c\u0435\u043d\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d. \u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043f\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u0446\u0438\u043a\u043b\u0443, \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0432\u043e\u0451 \u043c\u0435\u0441\u0442\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u044f\u0434\u043e\u043c \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u00ab\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c\u00bb, \u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u00ab\u0432\u0441\u043f\u043b\u044b\u0432\u0430\u0435\u0442\u00bb \u0434\u043e \u043d\u0443\u0436\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0443\u0437\u044b\u0440\u0451\u043a \u0432 \u0432\u043e\u0434\u0435, \u043e\u0442\u0441\u044e\u0434\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_2","text":"\u0425\u0443\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u041b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n) \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(1)","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_3","text":"def bubble_sort ( collection ): \"\"\"Pure implementation of bubble sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> bubble_sort([0, 5, 2, 3, 2]) [0, 2, 2, 3, 5] >>> bubble_sort([0, 5, 2, 3, 2]) == sorted([0, 5, 2, 3, 2]) True >>> bubble_sort([]) == sorted([]) True >>> bubble_sort([-2, -45, -5]) == sorted([-2, -45, -5]) True >>> bubble_sort([-23, 0, 6, -4, 34]) == sorted([-23, 0, 6, -4, 34]) True >>> bubble_sort(['d', 'a', 'b', 'e', 'c']) == sorted(['d', 'a', 'b', 'e', 'c']) True >>> import random >>> collection = random.sample(range(-50, 50), 100) >>> bubble_sort(collection) == sorted(collection) True >>> import string >>> collection = random.choices(string.ascii_letters + string.digits, k=100) >>> bubble_sort(collection) == sorted(collection) True \"\"\" length = len ( collection ) for i in range ( length - 1 ): swapped = False for j in range ( length - 1 - i ): if collection [ j ] > collection [ j + 1 ]: swapped = True collection [ j ], collection [ j + 1 ] = collection [ j + 1 ], collection [ j ] if not swapped : break # Stop iteration if the collection is sorted. return collection if __name__ == \"__main__\" : import doctest import time doctest . testmod () user_input = input ( \"Enter numbers separated by a comma:\" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] start = time . process_time () print ( * bubble_sort ( unsorted ), sep = \",\" ) print ( f \"Processing time: { time . process_time () - start } \" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bubble_sort/#_4","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/","text":"\u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (\u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043a\u043e\u0440\u0437\u0438\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, Bucket sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0414\u043b\u044f \u0431\u043b\u043e\u0447\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 k \u0431\u043b\u043e\u043a\u043e\u0432 (\u043a\u0430\u0440\u043c\u0430\u043d\u043e\u0432, \u043a\u043e\u0440\u0437\u0438\u043d). \u0414\u0430\u043b\u0435\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439, \u043b\u0438\u0431\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0442\u0435\u043c \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u043b\u043e\u043a\u0438. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0431\u043b\u043e\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0431\u044b\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e. \u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u043b\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u0437\u0438\u043d\u0443). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u0432\u0435\u043b\u0438\u043a\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u0440\u0435\u0434\u043a\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b). \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u041f\u0443\u0441\u0442\u044c n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, k \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f. n i \u2014 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043f\u0430\u0432\u0448\u0438\u0445 \u0432 i-\u044b\u0439 \u043a\u0430\u0440\u043c\u0430\u043d. T(n)=O(n) + \\sum_{i=1}^{k} O({n_i} log{n_i}) + O(k) , \u0433\u0434\u0435 T(n) \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043a\u0430\u0440\u043c\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. E[{n_i}]=\\frac{n}{k} \u0422\u043e \u0435\u0441\u0442\u044c, \u0435\u0441\u043b\u0438 n \u223c k \u21d2 E[T(n)] = O(n) \u0415\u0441\u043b\u0438, n = o(k) \u21d2 E[T(n)]=O(k) \u0418\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0443\u043b, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \"\u0431\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430\" \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 #!/usr/bin/env python3 \"\"\" Illustrate how to implement bucket sort algorithm. Author: OMKAR PATHAK This program will illustrate how to implement bucket sort algorithm Wikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. It is a distribution sort, and is a cousin of radix sort in the most to least significant digit flavour. Bucket sort is a generalization of pigeonhole sort. Bucket sort can be implemented with comparisons and therefore can also be considered a comparison sort algorithm. The computational complexity estimates involve the number of buckets. Time Complexity of Solution: Worst case scenario occurs when all the elements are placed in a single bucket. The overall performance would then be dominated by the algorithm used to sort each bucket. In this case, O(n log n), because of TimSort Average Case O(n + (n^2)/k + k), where k is the number of buckets If k = O(n), time complexity is O(n) Source: https://en.wikipedia.org/wiki/Bucket_sort \"\"\" def bucket_sort ( my_list : list ) -> list : \"\"\" >>> data = [-1, 2, -5, 0] >>> bucket_sort(data) == sorted(data) True >>> data = [9, 8, 7, 6, -12] >>> bucket_sort(data) == sorted(data) True >>> data = [.4, 1.2, .1, .2, -.9] >>> bucket_sort(data) == sorted(data) True >>> bucket_sort([]) == sorted([]) True >>> import random >>> collection = random.sample(range(-50, 50), 50) >>> bucket_sort(collection) == sorted(collection) True \"\"\" if len ( my_list ) == 0 : return [] min_value , max_value = min ( my_list ), max ( my_list ) bucket_count = int ( max_value - min_value ) + 1 buckets = [[] for _ in range ( bucket_count )] for i in range ( len ( my_list )): buckets [( int ( my_list [ i ] - min_value ) // bucket_count )] . append ( my_list [ i ]) return [ v for bucket in buckets for v in sorted ( bucket )] if __name__ == \"__main__\" : from doctest import testmod testmod () assert bucket_sort ([ 4 , 5 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert bucket_sort ([ 0 , 1 , - 10 , 15 , 2 , - 2 ]) == [ - 10 , - 2 , 0 , 1 , 2 , 15 ] \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (\u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043a\u043e\u0440\u0437\u0438\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, Bucket sort)"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#bucket-sort","text":"","title":"\u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (\u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043a\u043e\u0440\u0437\u0438\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, Bucket sort)"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_1","text":"\u0414\u043b\u044f \u0431\u043b\u043e\u0447\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 k \u0431\u043b\u043e\u043a\u043e\u0432 (\u043a\u0430\u0440\u043c\u0430\u043d\u043e\u0432, \u043a\u043e\u0440\u0437\u0438\u043d). \u0414\u0430\u043b\u0435\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439, \u043b\u0438\u0431\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0442\u0435\u043c \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u043b\u043e\u043a\u0438. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0431\u043b\u043e\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0431\u044b\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e. \u0411\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u043b\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u0437\u0438\u043d\u0443). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u0432\u0435\u043b\u0438\u043a\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u0440\u0435\u0434\u043a\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_2","text":"\u041f\u0443\u0441\u0442\u044c n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, k \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043b\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f. n i \u2014 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043f\u0430\u0432\u0448\u0438\u0445 \u0432 i-\u044b\u0439 \u043a\u0430\u0440\u043c\u0430\u043d. T(n)=O(n) + \\sum_{i=1}^{k} O({n_i} log{n_i}) + O(k) , \u0433\u0434\u0435 T(n) \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043a\u0430\u0440\u043c\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. E[{n_i}]=\\frac{n}{k} \u0422\u043e \u0435\u0441\u0442\u044c, \u0435\u0441\u043b\u0438 n \u223c k \u21d2 E[T(n)] = O(n) \u0415\u0441\u043b\u0438, n = o(k) \u21d2 E[T(n)]=O(k) \u0418\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0443\u043b, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \"\u0431\u043b\u043e\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430\" \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f.","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_3","text":"#!/usr/bin/env python3 \"\"\" Illustrate how to implement bucket sort algorithm. Author: OMKAR PATHAK This program will illustrate how to implement bucket sort algorithm Wikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. It is a distribution sort, and is a cousin of radix sort in the most to least significant digit flavour. Bucket sort is a generalization of pigeonhole sort. Bucket sort can be implemented with comparisons and therefore can also be considered a comparison sort algorithm. The computational complexity estimates involve the number of buckets. Time Complexity of Solution: Worst case scenario occurs when all the elements are placed in a single bucket. The overall performance would then be dominated by the algorithm used to sort each bucket. In this case, O(n log n), because of TimSort Average Case O(n + (n^2)/k + k), where k is the number of buckets If k = O(n), time complexity is O(n) Source: https://en.wikipedia.org/wiki/Bucket_sort \"\"\" def bucket_sort ( my_list : list ) -> list : \"\"\" >>> data = [-1, 2, -5, 0] >>> bucket_sort(data) == sorted(data) True >>> data = [9, 8, 7, 6, -12] >>> bucket_sort(data) == sorted(data) True >>> data = [.4, 1.2, .1, .2, -.9] >>> bucket_sort(data) == sorted(data) True >>> bucket_sort([]) == sorted([]) True >>> import random >>> collection = random.sample(range(-50, 50), 50) >>> bucket_sort(collection) == sorted(collection) True \"\"\" if len ( my_list ) == 0 : return [] min_value , max_value = min ( my_list ), max ( my_list ) bucket_count = int ( max_value - min_value ) + 1 buckets = [[] for _ in range ( bucket_count )] for i in range ( len ( my_list )): buckets [( int ( my_list [ i ] - min_value ) // bucket_count )] . append ( my_list [ i ]) return [ v for bucket in buckets for v in sorted ( bucket )] if __name__ == \"__main__\" : from doctest import testmod testmod () assert bucket_sort ([ 4 , 5 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert bucket_sort ([ 0 , 1 , - 10 , 15 , 2 , - 2 ]) == [ - 10 , - 2 , 0 , 1 , 2 , 15 ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/bucket_sort/#_4","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/","text":"\u0428\u0435\u0439\u043a\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Cocktail shaker sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0430\u0437\u043d\u043e\u0432\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u043c\u0435\u0442\u043e\u0434 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0434\u0432\u0430 \u043e\u0431\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430: \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442, \u0442\u043e \u044d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0443\u0436\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f. \u041f\u0440\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0438 \u043e\u0442 \u043a\u043e\u043d\u0446\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u00ab\u0432\u0441\u043f\u043b\u044b\u0432\u0430\u0435\u0442\u00bb \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e, \u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043f\u0440\u0430\u0432\u043e. \u042d\u0442\u0438 \u0434\u0432\u0435 \u0438\u0434\u0435\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\u043c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0442\u043e \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0433\u0434\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435) \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0435\u0441\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438. \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e \u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 O(N 2 ) \u043a\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0435\u0433\u043e, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f, \u043d\u043e \u043e\u043d\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043b\u0438\u0436\u0435 \u043a O(n) , \u0435\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d \u0434\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 k (k \u2265 1) \u043e\u0442 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f, \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0448\u0435\u0439\u043a\u0435\u0440\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f O(kn) . \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" https://en.wikipedia.org/wiki/Cocktail_shaker_sort \"\"\" def cocktail_shaker_sort ( unsorted : list ) -> list : \"\"\" Pure implementation of the cocktail shaker sort algorithm in Python. >>> cocktail_shaker_sort([4, 5, 2, 1, 2]) [1, 2, 2, 4, 5] >>> cocktail_shaker_sort([-4, 5, 0, 1, 2, 11]) [-4, 0, 1, 2, 5, 11] >>> cocktail_shaker_sort([0.1, -2.4, 4.4, 2.2]) [-2.4, 0.1, 2.2, 4.4] >>> cocktail_shaker_sort([1, 2, 3, 4, 5]) [1, 2, 3, 4, 5] >>> cocktail_shaker_sort([-4, -5, -24, -7, -11]) [-24, -11, -7, -5, -4] \"\"\" for i in range ( len ( unsorted ) - 1 , 0 , - 1 ): swapped = False for j in range ( i , 0 , - 1 ): if unsorted [ j ] < unsorted [ j - 1 ]: unsorted [ j ], unsorted [ j - 1 ] = unsorted [ j - 1 ], unsorted [ j ] swapped = True for j in range ( i ): if unsorted [ j ] > unsorted [ j + 1 ]: unsorted [ j ], unsorted [ j + 1 ] = unsorted [ j + 1 ], unsorted [ j ] swapped = True if not swapped : return unsorted if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( f \" { cocktail_shaker_sort ( unsorted ) = } \" ) \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0428\u0435\u0439\u043a\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Cocktail shaker sort)"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#cocktail-shaker-sort","text":"","title":"\u0428\u0435\u0439\u043a\u0435\u0440\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Cocktail shaker sort)"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_1","text":"\u0420\u0430\u0437\u043d\u043e\u0432\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u043c\u0435\u0442\u043e\u0434 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0434\u0432\u0430 \u043e\u0431\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430: \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0438 \u043f\u043e \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442, \u0442\u043e \u044d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0443\u0436\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f. \u041f\u0440\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0438 \u043e\u0442 \u043a\u043e\u043d\u0446\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u00ab\u0432\u0441\u043f\u043b\u044b\u0432\u0430\u0435\u0442\u00bb \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e, \u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043f\u0440\u0430\u0432\u043e. \u042d\u0442\u0438 \u0434\u0432\u0435 \u0438\u0434\u0435\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\u043c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u0432\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0442\u043e \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0433\u0434\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435) \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0435\u0441\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438. \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e \u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_2","text":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 O(N 2 ) \u043a\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0435\u0433\u043e, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f, \u043d\u043e \u043e\u043d\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043b\u0438\u0436\u0435 \u043a O(n) , \u0435\u0441\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d \u0434\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 k (k \u2265 1) \u043e\u0442 \u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f, \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0448\u0435\u0439\u043a\u0435\u0440\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f O(kn) .","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_3","text":"\"\"\" https://en.wikipedia.org/wiki/Cocktail_shaker_sort \"\"\" def cocktail_shaker_sort ( unsorted : list ) -> list : \"\"\" Pure implementation of the cocktail shaker sort algorithm in Python. >>> cocktail_shaker_sort([4, 5, 2, 1, 2]) [1, 2, 2, 4, 5] >>> cocktail_shaker_sort([-4, 5, 0, 1, 2, 11]) [-4, 0, 1, 2, 5, 11] >>> cocktail_shaker_sort([0.1, -2.4, 4.4, 2.2]) [-2.4, 0.1, 2.2, 4.4] >>> cocktail_shaker_sort([1, 2, 3, 4, 5]) [1, 2, 3, 4, 5] >>> cocktail_shaker_sort([-4, -5, -24, -7, -11]) [-24, -11, -7, -5, -4] \"\"\" for i in range ( len ( unsorted ) - 1 , 0 , - 1 ): swapped = False for j in range ( i , 0 , - 1 ): if unsorted [ j ] < unsorted [ j - 1 ]: unsorted [ j ], unsorted [ j - 1 ] = unsorted [ j - 1 ], unsorted [ j ] swapped = True for j in range ( i ): if unsorted [ j ] > unsorted [ j + 1 ]: unsorted [ j ], unsorted [ j + 1 ] = unsorted [ j + 1 ], unsorted [ j ] swapped = True if not swapped : return unsorted if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( f \" { cocktail_shaker_sort ( unsorted ) = } \" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cocktail_shaker_sort/#_4","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0441\u043a\u043e\u0439 (Comb Sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c. \u0412 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a (\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430) \u0440\u0430\u0432\u0435\u043d 1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f \u00ab\u0440\u0430\u0441\u0447\u0451\u0441\u043a\u0438\u00bb \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u043e \u043c\u0435\u0440\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0443\u0436\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432\u043f\u043b\u043e\u0442\u044c \u0434\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u043a\u0430\u043a \u0431\u044b \u043f\u0440\u0438\u0447\u0451\u0441\u044b\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u044f \u043d\u0430 \u0432\u0441\u0451 \u0431\u043e\u043b\u0435\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b\u0435 \u043f\u0440\u044f\u0434\u0438. \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u044b\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043b\u0443\u0447\u0448\u0435 \u0431\u0440\u0430\u0442\u044c \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 1,247 . \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0444\u0430\u043a\u0442\u043e\u0440 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e). \u0417\u0430\u0442\u0435\u043c, \u043f\u0440\u043e\u0439\u0434\u044f \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u044d\u0442\u0438\u043c \u0448\u0430\u0433\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u0448\u0430\u0433 \u043d\u0430 \u0444\u0430\u043a\u0442\u043e\u0440 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0439\u0442\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0432\u043d\u043e\u0432\u044c. \u0422\u0430\u043a \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043d\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043e\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0425\u0443\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u041b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n logn) \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u03a9(n 2 / 2 p ) , \u0433\u0434\u0435 p - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(1) \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is pure Python implementation of comb sort algorithm. Comb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz Dobosiewicz in 1980. It was rediscovered by Stephen Lacey and Richard Box in 1991. Comb sort improves on bubble sort algorithm. In bubble sort, distance (or gap) between two compared elements is always one. Comb sort improvement is that gap can be much more than 1, in order to prevent slowing down by small values at the end of a list. More info on: https://en.wikipedia.org/wiki/Comb_sort For doctests run following command: python -m doctest -v comb_sort.py or python3 -m doctest -v comb_sort.py For manual testing run: python comb_sort.py \"\"\" def comb_sort ( data : list ) -> list : \"\"\"Pure implementation of comb sort algorithm in Python :param data: mutable collection with comparable items :return: the same collection in ascending order Examples: >>> comb_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> comb_sort([]) [] >>> comb_sort([99, 45, -7, 8, 2, 0, -15, 3]) [-15, -7, 0, 2, 3, 8, 45, 99] \"\"\" shrink_factor = 1.3 gap = len ( data ) completed = False while not completed : # Update the gap value for a next comb gap = int ( gap / shrink_factor ) if gap <= 1 : completed = True index = 0 while index + gap < len ( data ): if data [ index ] > data [ index + gap ]: # Swap values data [ index ], data [ index + gap ] = data [ index + gap ], data [ index ] completed = False index += 1 return data if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( comb_sort ( unsorted )) \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0441\u043a\u043e\u0439 (Comb Sort)"},{"location":"content/algorithms/implementations/sorts/comb_sort/#comb-sort","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0441\u043a\u043e\u0439 (Comb Sort)"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_1","text":"\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c. \u0412 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a (\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430) \u0440\u0430\u0432\u0435\u043d 1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f \u00ab\u0440\u0430\u0441\u0447\u0451\u0441\u043a\u0438\u00bb \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u043e \u043c\u0435\u0440\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0443\u0436\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432\u043f\u043b\u043e\u0442\u044c \u0434\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u043a\u0430\u043a \u0431\u044b \u043f\u0440\u0438\u0447\u0451\u0441\u044b\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u044f \u043d\u0430 \u0432\u0441\u0451 \u0431\u043e\u043b\u0435\u0435 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b\u0435 \u043f\u0440\u044f\u0434\u0438. \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u044b\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043b\u0443\u0447\u0448\u0435 \u0431\u0440\u0430\u0442\u044c \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 1,247 . \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0444\u0430\u043a\u0442\u043e\u0440 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e). \u0417\u0430\u0442\u0435\u043c, \u043f\u0440\u043e\u0439\u0434\u044f \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u044d\u0442\u0438\u043c \u0448\u0430\u0433\u043e\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u0448\u0430\u0433 \u043d\u0430 \u0444\u0430\u043a\u0442\u043e\u0440 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0439\u0442\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0432\u043d\u043e\u0432\u044c. \u0422\u0430\u043a \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043d\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043e\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_2","text":"\u0425\u0443\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n 2 ) \u041b\u0443\u0447\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f O(n logn) \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u03a9(n 2 / 2 p ) , \u0433\u0434\u0435 p - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0417\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u0430\u043c\u044f\u0442\u0438 O(1)","title":"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_3","text":"\"\"\" This is pure Python implementation of comb sort algorithm. Comb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz Dobosiewicz in 1980. It was rediscovered by Stephen Lacey and Richard Box in 1991. Comb sort improves on bubble sort algorithm. In bubble sort, distance (or gap) between two compared elements is always one. Comb sort improvement is that gap can be much more than 1, in order to prevent slowing down by small values at the end of a list. More info on: https://en.wikipedia.org/wiki/Comb_sort For doctests run following command: python -m doctest -v comb_sort.py or python3 -m doctest -v comb_sort.py For manual testing run: python comb_sort.py \"\"\" def comb_sort ( data : list ) -> list : \"\"\"Pure implementation of comb sort algorithm in Python :param data: mutable collection with comparable items :return: the same collection in ascending order Examples: >>> comb_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> comb_sort([]) [] >>> comb_sort([99, 45, -7, 8, 2, 0, -15, 3]) [-15, -7, 0, 2, 3, 8, 45, 99] \"\"\" shrink_factor = 1.3 gap = len ( data ) completed = False while not completed : # Update the gap value for a next comb gap = int ( gap / shrink_factor ) if gap <= 1 : completed = True index = 0 while index + gap < len ( data ): if data [ index ] > data [ index + gap ]: # Swap values data [ index ], data [ index + gap ] = data [ index + gap ], data [ index ] completed = False index += 1 return data if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( comb_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/comb_sort/#_4","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/counting_sort/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u043c (Counting Sort) \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c \u2013 \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0441\u043b\u0443\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a, \u043d\u043e \u0441\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0441 \u0442\u0435\u043c\u043e\u0439. \u0415\u0433\u043e \u0441\u0443\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u044d\u0442\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is pure Python implementation of counting sort algorithm For doctests run following command: python -m doctest -v counting_sort.py or python3 -m doctest -v counting_sort.py For manual testing run: python counting_sort.py \"\"\" def counting_sort ( collection ): \"\"\"Pure implementation of counting sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> counting_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> counting_sort([]) [] >>> counting_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" # if the collection is empty, returns empty if collection == []: return [] # get some information about the collection coll_len = len ( collection ) coll_max = max ( collection ) coll_min = min ( collection ) # create the counting array counting_arr_length = coll_max + 1 - coll_min counting_arr = [ 0 ] * counting_arr_length # count how much a number appears in the collection for number in collection : counting_arr [ number - coll_min ] += 1 # sum each position with it's predecessors. now, counting_arr[i] tells # us how many elements <= i has in the collection for i in range ( 1 , counting_arr_length ): counting_arr [ i ] = counting_arr [ i ] + counting_arr [ i - 1 ] # create the output collection ordered = [ 0 ] * coll_len # place the elements in the output, respecting the original order (stable # sort) from end to begin, updating counting_arr for i in reversed ( range ( 0 , coll_len )): ordered [ counting_arr [ collection [ i ] - coll_min ] - 1 ] = collection [ i ] counting_arr [ collection [ i ] - coll_min ] -= 1 return ordered def counting_sort_string ( string ): \"\"\" >>> counting_sort_string(\"thisisthestring\") 'eghhiiinrsssttt' \"\"\" return \"\" . join ([ chr ( i ) for i in counting_sort ([ ord ( c ) for c in string ])]) if __name__ == \"__main__\" : # Test string sort assert \"eghhiiinrsssttt\" == counting_sort_string ( \"thisisthestring\" ) user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( counting_sort ( unsorted )) \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u043c (Counting Sort)"},{"location":"content/algorithms/implementations/sorts/counting_sort/#counting-sort","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u043c (Counting Sort)"},{"location":"content/algorithms/implementations/sorts/counting_sort/#_1","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c \u2013 \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0441\u043b\u0443\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a, \u043d\u043e \u0441\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0441 \u0442\u0435\u043c\u043e\u0439. \u0415\u0433\u043e \u0441\u0443\u0442\u044c \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u044d\u0442\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/counting_sort/#_2","text":"\"\"\" This is pure Python implementation of counting sort algorithm For doctests run following command: python -m doctest -v counting_sort.py or python3 -m doctest -v counting_sort.py For manual testing run: python counting_sort.py \"\"\" def counting_sort ( collection ): \"\"\"Pure implementation of counting sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> counting_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> counting_sort([]) [] >>> counting_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" # if the collection is empty, returns empty if collection == []: return [] # get some information about the collection coll_len = len ( collection ) coll_max = max ( collection ) coll_min = min ( collection ) # create the counting array counting_arr_length = coll_max + 1 - coll_min counting_arr = [ 0 ] * counting_arr_length # count how much a number appears in the collection for number in collection : counting_arr [ number - coll_min ] += 1 # sum each position with it's predecessors. now, counting_arr[i] tells # us how many elements <= i has in the collection for i in range ( 1 , counting_arr_length ): counting_arr [ i ] = counting_arr [ i ] + counting_arr [ i - 1 ] # create the output collection ordered = [ 0 ] * coll_len # place the elements in the output, respecting the original order (stable # sort) from end to begin, updating counting_arr for i in reversed ( range ( 0 , coll_len )): ordered [ counting_arr [ collection [ i ] - coll_min ] - 1 ] = collection [ i ] counting_arr [ collection [ i ] - coll_min ] -= 1 return ordered def counting_sort_string ( string ): \"\"\" >>> counting_sort_string(\"thisisthestring\") 'eghhiiinrsssttt' \"\"\" return \"\" . join ([ chr ( i ) for i in counting_sort ([ ord ( c ) for c in string ])]) if __name__ == \"__main__\" : # Test string sort assert \"eghhiiinrsssttt\" == counting_sort_string ( \"thisisthestring\" ) user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( counting_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/counting_sort/#_3","text":"","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cycle_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Code contributed by Honey Sharma Source: https://en.wikipedia.org/wiki/Cycle_sort \"\"\" def cycle_sort ( array : list ) -> list : \"\"\" >>> cycle_sort([4, 3, 2, 1]) [1, 2, 3, 4] >>> cycle_sort([-4, 20, 0, -50, 100, -1]) [-50, -4, -1, 0, 20, 100] >>> cycle_sort([-.1, -.2, 1.3, -.8]) [-0.8, -0.2, -0.1, 1.3] >>> cycle_sort([]) [] \"\"\" array_len = len ( array ) for cycle_start in range ( 0 , array_len - 1 ): item = array [ cycle_start ] pos = cycle_start for i in range ( cycle_start + 1 , array_len ): if array [ i ] < item : pos += 1 if pos == cycle_start : continue while item == array [ pos ]: pos += 1 array [ pos ], item = item , array [ pos ] while pos != cycle_start : pos = cycle_start for i in range ( cycle_start + 1 , array_len ): if array [ i ] < item : pos += 1 while item == array [ pos ]: pos += 1 array [ pos ], item = item , array [ pos ] return array if __name__ == \"__main__\" : assert cycle_sort ([ 4 , 5 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert cycle_sort ([ 0 , 1 , - 10 , 15 , 2 , - 2 ]) == [ - 10 , - 2 , 0 , 1 , 2 , 15 ]","title":"Cycle sort"},{"location":"content/algorithms/implementations/sorts/cycle_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/cycle_sort/#_2","text":"\"\"\" Code contributed by Honey Sharma Source: https://en.wikipedia.org/wiki/Cycle_sort \"\"\" def cycle_sort ( array : list ) -> list : \"\"\" >>> cycle_sort([4, 3, 2, 1]) [1, 2, 3, 4] >>> cycle_sort([-4, 20, 0, -50, 100, -1]) [-50, -4, -1, 0, 20, 100] >>> cycle_sort([-.1, -.2, 1.3, -.8]) [-0.8, -0.2, -0.1, 1.3] >>> cycle_sort([]) [] \"\"\" array_len = len ( array ) for cycle_start in range ( 0 , array_len - 1 ): item = array [ cycle_start ] pos = cycle_start for i in range ( cycle_start + 1 , array_len ): if array [ i ] < item : pos += 1 if pos == cycle_start : continue while item == array [ pos ]: pos += 1 array [ pos ], item = item , array [ pos ] while pos != cycle_start : pos = cycle_start for i in range ( cycle_start + 1 , array_len ): if array [ i ] < item : pos += 1 while item == array [ pos ]: pos += 1 array [ pos ], item = item , array [ pos ] return array if __name__ == \"__main__\" : assert cycle_sort ([ 4 , 5 , 3 , 2 , 1 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert cycle_sort ([ 0 , 1 , - 10 , 15 , 2 , - 2 ]) == [ - 10 , - 2 , 0 , 1 , 2 , 15 ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/double_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def double_sort ( lst ): \"\"\"this sorting algorithm sorts an array using the principle of bubble sort, but does it both from left to right and right to left, hence i decided to call it \"double sort\" :param collection: mutable ordered sequence of elements :return: the same collection in ascending order Examples: >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6 ,-7]) [-7, -6, -5, -4, -3, -2, -1] >>> double_sort([]) [] >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6]) [-6, -5, -4, -3, -2, -1] >>> double_sort([-3, 10, 16, -42, 29]) == sorted([-3, 10, 16, -42, 29]) True \"\"\" no_of_elements = len ( lst ) for i in range ( 0 , int ((( no_of_elements - 1 ) / 2 ) + 1 ) ): # we don't need to traverse to end of list as for j in range ( 0 , no_of_elements - 1 ): if ( lst [ j + 1 ] < lst [ j ] ): # applying bubble sort algorithm from left to right (or forwards) temp = lst [ j + 1 ] lst [ j + 1 ] = lst [ j ] lst [ j ] = temp if ( lst [ no_of_elements - 1 - j ] < lst [ no_of_elements - 2 - j ] ): # applying bubble sort algorithm from right to left (or backwards) temp = lst [ no_of_elements - 1 - j ] lst [ no_of_elements - 1 - j ] = lst [ no_of_elements - 2 - j ] lst [ no_of_elements - 2 - j ] = temp return lst if __name__ == \"__main__\" : print ( \"enter the list to be sorted\" ) lst = [ int ( x ) for x in input () . split ()] # inputing elements of the list in one line sorted_lst = double_sort ( lst ) print ( \"the sorted list is\" ) print ( sorted_lst )","title":"Double sort"},{"location":"content/algorithms/implementations/sorts/double_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/double_sort/#_2","text":"def double_sort ( lst ): \"\"\"this sorting algorithm sorts an array using the principle of bubble sort, but does it both from left to right and right to left, hence i decided to call it \"double sort\" :param collection: mutable ordered sequence of elements :return: the same collection in ascending order Examples: >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6 ,-7]) [-7, -6, -5, -4, -3, -2, -1] >>> double_sort([]) [] >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6]) [-6, -5, -4, -3, -2, -1] >>> double_sort([-3, 10, 16, -42, 29]) == sorted([-3, 10, 16, -42, 29]) True \"\"\" no_of_elements = len ( lst ) for i in range ( 0 , int ((( no_of_elements - 1 ) / 2 ) + 1 ) ): # we don't need to traverse to end of list as for j in range ( 0 , no_of_elements - 1 ): if ( lst [ j + 1 ] < lst [ j ] ): # applying bubble sort algorithm from left to right (or forwards) temp = lst [ j + 1 ] lst [ j + 1 ] = lst [ j ] lst [ j ] = temp if ( lst [ no_of_elements - 1 - j ] < lst [ no_of_elements - 2 - j ] ): # applying bubble sort algorithm from right to left (or backwards) temp = lst [ no_of_elements - 1 - j ] lst [ no_of_elements - 1 - j ] = lst [ no_of_elements - 2 - j ] lst [ no_of_elements - 2 - j ] = temp return lst if __name__ == \"__main__\" : print ( \"enter the list to be sorted\" ) lst = [ int ( x ) for x in input () . split ()] # inputing elements of the list in one line sorted_lst = double_sort ( lst ) print ( \"the sorted list is\" ) print ( sorted_lst )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/external_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 #!/usr/bin/env python # # Sort large text files in a minimum amount of memory # import argparse import os class FileSplitter : BLOCK_FILENAME_FORMAT = \"block_ {0} .dat\" def __init__ ( self , filename ): self . filename = filename self . block_filenames = [] def write_block ( self , data , block_number ): filename = self . BLOCK_FILENAME_FORMAT . format ( block_number ) with open ( filename , \"w\" ) as file : file . write ( data ) self . block_filenames . append ( filename ) def get_block_filenames ( self ): return self . block_filenames def split ( self , block_size , sort_key = None ): i = 0 with open ( self . filename ) as file : while True : lines = file . readlines ( block_size ) if lines == []: break if sort_key is None : lines . sort () else : lines . sort ( key = sort_key ) self . write_block ( \"\" . join ( lines ), i ) i += 1 def cleanup ( self ): map ( lambda f : os . remove ( f ), self . block_filenames ) class NWayMerge : def select ( self , choices ): min_index = - 1 min_str = None for i in range ( len ( choices )): if min_str is None or choices [ i ] < min_str : min_index = i return min_index class FilesArray : def __init__ ( self , files ): self . files = files self . empty = set () self . num_buffers = len ( files ) self . buffers = { i : None for i in range ( self . num_buffers )} def get_dict ( self ): return { i : self . buffers [ i ] for i in range ( self . num_buffers ) if i not in self . empty } def refresh ( self ): for i in range ( self . num_buffers ): if self . buffers [ i ] is None and i not in self . empty : self . buffers [ i ] = self . files [ i ] . readline () if self . buffers [ i ] == \"\" : self . empty . add ( i ) self . files [ i ] . close () if len ( self . empty ) == self . num_buffers : return False return True def unshift ( self , index ): value = self . buffers [ index ] self . buffers [ index ] = None return value class FileMerger : def __init__ ( self , merge_strategy ): self . merge_strategy = merge_strategy def merge ( self , filenames , outfilename , buffer_size ): buffers = FilesArray ( self . get_file_handles ( filenames , buffer_size )) with open ( outfilename , \"w\" , buffer_size ) as outfile : while buffers . refresh (): min_index = self . merge_strategy . select ( buffers . get_dict ()) outfile . write ( buffers . unshift ( min_index )) def get_file_handles ( self , filenames , buffer_size ): files = {} for i in range ( len ( filenames )): files [ i ] = open ( filenames [ i ], \"r\" , buffer_size ) return files class ExternalSort : def __init__ ( self , block_size ): self . block_size = block_size def sort ( self , filename , sort_key = None ): num_blocks = self . get_number_blocks ( filename , self . block_size ) splitter = FileSplitter ( filename ) splitter . split ( self . block_size , sort_key ) merger = FileMerger ( NWayMerge ()) buffer_size = self . block_size / ( num_blocks + 1 ) merger . merge ( splitter . get_block_filenames (), filename + \".out\" , buffer_size ) splitter . cleanup () def get_number_blocks ( self , filename , block_size ): return ( os . stat ( filename ) . st_size / block_size ) + 1 def parse_memory ( string ): if string [ - 1 ] . lower () == \"k\" : return int ( string [: - 1 ]) * 1024 elif string [ - 1 ] . lower () == \"m\" : return int ( string [: - 1 ]) * 1024 * 1024 elif string [ - 1 ] . lower () == \"g\" : return int ( string [: - 1 ]) * 1024 * 1024 * 1024 else : return int ( string ) def main (): parser = argparse . ArgumentParser () parser . add_argument ( \"-m\" , \"--mem\" , help = \"amount of memory to use for sorting\" , default = \"100M\" ) parser . add_argument ( \"filename\" , metavar = \"<filename>\" , nargs = 1 , help = \"name of file to sort\" ) args = parser . parse_args () sorter = ExternalSort ( parse_memory ( args . mem )) sorter . sort ( args . filename [ 0 ]) if __name__ == \"__main__\" : main ()","title":"External sort"},{"location":"content/algorithms/implementations/sorts/external_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/external_sort/#_2","text":"#!/usr/bin/env python # # Sort large text files in a minimum amount of memory # import argparse import os class FileSplitter : BLOCK_FILENAME_FORMAT = \"block_ {0} .dat\" def __init__ ( self , filename ): self . filename = filename self . block_filenames = [] def write_block ( self , data , block_number ): filename = self . BLOCK_FILENAME_FORMAT . format ( block_number ) with open ( filename , \"w\" ) as file : file . write ( data ) self . block_filenames . append ( filename ) def get_block_filenames ( self ): return self . block_filenames def split ( self , block_size , sort_key = None ): i = 0 with open ( self . filename ) as file : while True : lines = file . readlines ( block_size ) if lines == []: break if sort_key is None : lines . sort () else : lines . sort ( key = sort_key ) self . write_block ( \"\" . join ( lines ), i ) i += 1 def cleanup ( self ): map ( lambda f : os . remove ( f ), self . block_filenames ) class NWayMerge : def select ( self , choices ): min_index = - 1 min_str = None for i in range ( len ( choices )): if min_str is None or choices [ i ] < min_str : min_index = i return min_index class FilesArray : def __init__ ( self , files ): self . files = files self . empty = set () self . num_buffers = len ( files ) self . buffers = { i : None for i in range ( self . num_buffers )} def get_dict ( self ): return { i : self . buffers [ i ] for i in range ( self . num_buffers ) if i not in self . empty } def refresh ( self ): for i in range ( self . num_buffers ): if self . buffers [ i ] is None and i not in self . empty : self . buffers [ i ] = self . files [ i ] . readline () if self . buffers [ i ] == \"\" : self . empty . add ( i ) self . files [ i ] . close () if len ( self . empty ) == self . num_buffers : return False return True def unshift ( self , index ): value = self . buffers [ index ] self . buffers [ index ] = None return value class FileMerger : def __init__ ( self , merge_strategy ): self . merge_strategy = merge_strategy def merge ( self , filenames , outfilename , buffer_size ): buffers = FilesArray ( self . get_file_handles ( filenames , buffer_size )) with open ( outfilename , \"w\" , buffer_size ) as outfile : while buffers . refresh (): min_index = self . merge_strategy . select ( buffers . get_dict ()) outfile . write ( buffers . unshift ( min_index )) def get_file_handles ( self , filenames , buffer_size ): files = {} for i in range ( len ( filenames )): files [ i ] = open ( filenames [ i ], \"r\" , buffer_size ) return files class ExternalSort : def __init__ ( self , block_size ): self . block_size = block_size def sort ( self , filename , sort_key = None ): num_blocks = self . get_number_blocks ( filename , self . block_size ) splitter = FileSplitter ( filename ) splitter . split ( self . block_size , sort_key ) merger = FileMerger ( NWayMerge ()) buffer_size = self . block_size / ( num_blocks + 1 ) merger . merge ( splitter . get_block_filenames (), filename + \".out\" , buffer_size ) splitter . cleanup () def get_number_blocks ( self , filename , block_size ): return ( os . stat ( filename ) . st_size / block_size ) + 1 def parse_memory ( string ): if string [ - 1 ] . lower () == \"k\" : return int ( string [: - 1 ]) * 1024 elif string [ - 1 ] . lower () == \"m\" : return int ( string [: - 1 ]) * 1024 * 1024 elif string [ - 1 ] . lower () == \"g\" : return int ( string [: - 1 ]) * 1024 * 1024 * 1024 else : return int ( string ) def main (): parser = argparse . ArgumentParser () parser . add_argument ( \"-m\" , \"--mem\" , help = \"amount of memory to use for sorting\" , default = \"100M\" ) parser . add_argument ( \"filename\" , metavar = \"<filename>\" , nargs = 1 , help = \"name of file to sort\" ) args = parser . parse_args () sorter = ExternalSort ( parse_memory ( args . mem )) sorter . sort ( args . filename [ 0 ]) if __name__ == \"__main__\" : main ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/gnome_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Gnome Sort Algorithm (A.K.A. Stupid Sort) This algorithm iterates over a list comparing an element with the previous one. If order is not respected, it swaps element backward until order is respected with previous element. It resumes the initial iteration from element new position. For doctests run following command: python3 -m doctest -v gnome_sort.py For manual testing run: python3 gnome_sort.py \"\"\" def gnome_sort ( lst : list ) -> list : \"\"\" Pure implementation of the gnome sort algorithm in Python Take some mutable ordered collection with heterogeneous comparable items inside as arguments, return the same collection ordered by ascending. Examples: >>> gnome_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> gnome_sort([]) [] >>> gnome_sort([-2, -5, -45]) [-45, -5, -2] >>> \"\".join(gnome_sort(list(set(\"Gnomes are stupid!\")))) ' !Gadeimnoprstu' \"\"\" if len ( lst ) <= 1 : return lst i = 1 while i < len ( lst ): if lst [ i - 1 ] <= lst [ i ]: i += 1 else : lst [ i - 1 ], lst [ i ] = lst [ i ], lst [ i - 1 ] i -= 1 if i == 0 : i = 1 return lst if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( gnome_sort ( unsorted ))","title":"Gnome sort"},{"location":"content/algorithms/implementations/sorts/gnome_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/gnome_sort/#_2","text":"\"\"\" Gnome Sort Algorithm (A.K.A. Stupid Sort) This algorithm iterates over a list comparing an element with the previous one. If order is not respected, it swaps element backward until order is respected with previous element. It resumes the initial iteration from element new position. For doctests run following command: python3 -m doctest -v gnome_sort.py For manual testing run: python3 gnome_sort.py \"\"\" def gnome_sort ( lst : list ) -> list : \"\"\" Pure implementation of the gnome sort algorithm in Python Take some mutable ordered collection with heterogeneous comparable items inside as arguments, return the same collection ordered by ascending. Examples: >>> gnome_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> gnome_sort([]) [] >>> gnome_sort([-2, -5, -45]) [-45, -5, -2] >>> \"\".join(gnome_sort(list(set(\"Gnomes are stupid!\")))) ' !Gadeimnoprstu' \"\"\" if len ( lst ) <= 1 : return lst i = 1 while i < len ( lst ): if lst [ i - 1 ] <= lst [ i ]: i += 1 else : lst [ i - 1 ], lst [ i ] = lst [ i ], lst [ i - 1 ] i -= 1 if i == 0 : i = 1 return lst if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( gnome_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/heap_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the heap sort algorithm. For doctests run following command: python -m doctest -v heap_sort.py or python3 -m doctest -v heap_sort.py For manual testing run: python heap_sort.py \"\"\" def heapify ( unsorted , index , heap_size ): largest = index left_index = 2 * index + 1 right_index = 2 * index + 2 if left_index < heap_size and unsorted [ left_index ] > unsorted [ largest ]: largest = left_index if right_index < heap_size and unsorted [ right_index ] > unsorted [ largest ]: largest = right_index if largest != index : unsorted [ largest ], unsorted [ index ] = unsorted [ index ], unsorted [ largest ] heapify ( unsorted , largest , heap_size ) def heap_sort ( unsorted ): \"\"\" Pure implementation of the heap sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> heap_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> heap_sort([]) [] >>> heap_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" n = len ( unsorted ) for i in range ( n // 2 - 1 , - 1 , - 1 ): heapify ( unsorted , i , n ) for i in range ( n - 1 , 0 , - 1 ): unsorted [ 0 ], unsorted [ i ] = unsorted [ i ], unsorted [ 0 ] heapify ( unsorted , 0 , i ) return unsorted if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( heap_sort ( unsorted ))","title":"Heap sort"},{"location":"content/algorithms/implementations/sorts/heap_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/heap_sort/#_2","text":"\"\"\" This is a pure Python implementation of the heap sort algorithm. For doctests run following command: python -m doctest -v heap_sort.py or python3 -m doctest -v heap_sort.py For manual testing run: python heap_sort.py \"\"\" def heapify ( unsorted , index , heap_size ): largest = index left_index = 2 * index + 1 right_index = 2 * index + 2 if left_index < heap_size and unsorted [ left_index ] > unsorted [ largest ]: largest = left_index if right_index < heap_size and unsorted [ right_index ] > unsorted [ largest ]: largest = right_index if largest != index : unsorted [ largest ], unsorted [ index ] = unsorted [ index ], unsorted [ largest ] heapify ( unsorted , largest , heap_size ) def heap_sort ( unsorted ): \"\"\" Pure implementation of the heap sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> heap_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> heap_sort([]) [] >>> heap_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" n = len ( unsorted ) for i in range ( n // 2 - 1 , - 1 , - 1 ): heapify ( unsorted , i , n ) for i in range ( n - 1 , 0 , - 1 ): unsorted [ 0 ], unsorted [ i ] = unsorted [ i ], unsorted [ 0 ] heapify ( unsorted , 0 , i ) return unsorted if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( heap_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" A pure Python implementation of the insertion sort algorithm This algorithm sorts a collection by comparing adjacent elements. When it finds that order is not respected, it moves the element compared backward until the order is correct. It then goes back directly to the element's initial position resuming forward comparison. For doctests run following command: python3 -m doctest -v insertion_sort.py For manual testing run: python3 insertion_sort.py \"\"\" def insertion_sort ( collection : list ) -> list : \"\"\"A pure Python implementation of the insertion sort algorithm :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> insertion_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> insertion_sort([]) == sorted([]) True >>> insertion_sort([-2, -5, -45]) == sorted([-2, -5, -45]) True >>> insertion_sort(['d', 'a', 'b', 'e', 'c']) == sorted(['d', 'a', 'b', 'e', 'c']) True >>> import random >>> collection = random.sample(range(-50, 50), 100) >>> insertion_sort(collection) == sorted(collection) True >>> import string >>> collection = random.choices(string.ascii_letters + string.digits, k=100) >>> insertion_sort(collection) == sorted(collection) True \"\"\" for insert_index , insert_value in enumerate ( collection [ 1 :]): temp_index = insert_index while insert_index >= 0 and insert_value < collection [ insert_index ]: collection [ insert_index + 1 ] = collection [ insert_index ] insert_index -= 1 if insert_index != temp_index : collection [ insert_index + 1 ] = insert_value return collection if __name__ == \"__main__\" : from doctest import testmod testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( f \" { insertion_sort ( unsorted ) = } \" )","title":"Insertion sort"},{"location":"content/algorithms/implementations/sorts/insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/insertion_sort/#_2","text":"\"\"\" A pure Python implementation of the insertion sort algorithm This algorithm sorts a collection by comparing adjacent elements. When it finds that order is not respected, it moves the element compared backward until the order is correct. It then goes back directly to the element's initial position resuming forward comparison. For doctests run following command: python3 -m doctest -v insertion_sort.py For manual testing run: python3 insertion_sort.py \"\"\" def insertion_sort ( collection : list ) -> list : \"\"\"A pure Python implementation of the insertion sort algorithm :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> insertion_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> insertion_sort([]) == sorted([]) True >>> insertion_sort([-2, -5, -45]) == sorted([-2, -5, -45]) True >>> insertion_sort(['d', 'a', 'b', 'e', 'c']) == sorted(['d', 'a', 'b', 'e', 'c']) True >>> import random >>> collection = random.sample(range(-50, 50), 100) >>> insertion_sort(collection) == sorted(collection) True >>> import string >>> collection = random.choices(string.ascii_letters + string.digits, k=100) >>> insertion_sort(collection) == sorted(collection) True \"\"\" for insert_index , insert_value in enumerate ( collection [ 1 :]): temp_index = insert_index while insert_index >= 0 and insert_value < collection [ insert_index ]: collection [ insert_index + 1 ] = collection [ insert_index ] insert_index -= 1 if insert_index != temp_index : collection [ insert_index + 1 ] = insert_value return collection if __name__ == \"__main__\" : from doctest import testmod testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( f \" { insertion_sort ( unsorted ) = } \" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Implementation of iterative merge sort in Python Author: Aman Gupta For doctests run following command: python3 -m doctest -v iterative_merge_sort.py For manual testing run: python3 iterative_merge_sort.py \"\"\" from __future__ import annotations def merge ( input_list : list , low : int , mid : int , high : int ) -> list : \"\"\" sorting left-half and right-half individually then merging them into result \"\"\" result = [] left , right = input_list [ low : mid ], input_list [ mid : high + 1 ] while left and right : result . append (( left if left [ 0 ] <= right [ 0 ] else right ) . pop ( 0 )) input_list [ low : high + 1 ] = result + left + right return input_list # iteration over the unsorted list def iter_merge_sort ( input_list : list ) -> list : \"\"\" Return a sorted copy of the input list >>> iter_merge_sort([5, 9, 8, 7, 1, 2, 7]) [1, 2, 5, 7, 7, 8, 9] >>> iter_merge_sort([6]) [6] >>> iter_merge_sort([]) [] >>> iter_merge_sort([-2, -9, -1, -4]) [-9, -4, -2, -1] >>> iter_merge_sort([1.1, 1, 0.0, -1, -1.1]) [-1.1, -1, 0.0, 1, 1.1] >>> iter_merge_sort(['c', 'b', 'a']) ['a', 'b', 'c'] >>> iter_merge_sort('cba') ['a', 'b', 'c'] \"\"\" if len ( input_list ) <= 1 : return input_list input_list = list ( input_list ) # iteration for two-way merging p = 2 while p < len ( input_list ): # getting low, high and middle value for merge-sort of single list for i in range ( 0 , len ( input_list ), p ): low = i high = i + p - 1 mid = ( low + high + 1 ) // 2 input_list = merge ( input_list , low , mid , high ) # final merge of last two parts if p * 2 >= len ( input_list ): mid = i input_list = merge ( input_list , 0 , mid , len ( input_list ) - 1 ) p *= 2 return input_list if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item . strip ()) for item in user_input . split ( \",\" )] print ( iter_merge_sort ( unsorted ))","title":"Iterative merge sort"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/iterative_merge_sort/#_2","text":"\"\"\" Implementation of iterative merge sort in Python Author: Aman Gupta For doctests run following command: python3 -m doctest -v iterative_merge_sort.py For manual testing run: python3 iterative_merge_sort.py \"\"\" from __future__ import annotations def merge ( input_list : list , low : int , mid : int , high : int ) -> list : \"\"\" sorting left-half and right-half individually then merging them into result \"\"\" result = [] left , right = input_list [ low : mid ], input_list [ mid : high + 1 ] while left and right : result . append (( left if left [ 0 ] <= right [ 0 ] else right ) . pop ( 0 )) input_list [ low : high + 1 ] = result + left + right return input_list # iteration over the unsorted list def iter_merge_sort ( input_list : list ) -> list : \"\"\" Return a sorted copy of the input list >>> iter_merge_sort([5, 9, 8, 7, 1, 2, 7]) [1, 2, 5, 7, 7, 8, 9] >>> iter_merge_sort([6]) [6] >>> iter_merge_sort([]) [] >>> iter_merge_sort([-2, -9, -1, -4]) [-9, -4, -2, -1] >>> iter_merge_sort([1.1, 1, 0.0, -1, -1.1]) [-1.1, -1, 0.0, 1, 1.1] >>> iter_merge_sort(['c', 'b', 'a']) ['a', 'b', 'c'] >>> iter_merge_sort('cba') ['a', 'b', 'c'] \"\"\" if len ( input_list ) <= 1 : return input_list input_list = list ( input_list ) # iteration for two-way merging p = 2 while p < len ( input_list ): # getting low, high and middle value for merge-sort of single list for i in range ( 0 , len ( input_list ), p ): low = i high = i + p - 1 mid = ( low + high + 1 ) // 2 input_list = merge ( input_list , low , mid , high ) # final merge of last two parts if p * 2 >= len ( input_list ): mid = i input_list = merge ( input_list , 0 , mid , len ( input_list ) - 1 ) p *= 2 return input_list if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item . strip ()) for item in user_input . split ( \",\" )] print ( iter_merge_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the merge-insertion sort algorithm Source: https://en.wikipedia.org/wiki/Merge-insertion_sort For doctests run following command: python3 -m doctest -v merge_insertion_sort.py or python -m doctest -v merge_insertion_sort.py For manual testing run: python3 merge_insertion_sort.py \"\"\" from __future__ import annotations def merge_insertion_sort ( collection : list [ int ]) -> list [ int ]: \"\"\"Pure implementation of merge-insertion sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> merge_insertion_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_insertion_sort([99]) [99] >>> merge_insertion_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def binary_search_insertion ( sorted_list , item ): left = 0 right = len ( sorted_list ) - 1 while left <= right : middle = ( left + right ) // 2 if left == right : if sorted_list [ middle ] < item : left = middle + 1 break elif sorted_list [ middle ] < item : left = middle + 1 else : right = middle - 1 sorted_list . insert ( left , item ) return sorted_list def sortlist_2d ( list_2d ): def merge ( left , right ): result = [] while left and right : if left [ 0 ][ 0 ] < right [ 0 ][ 0 ]: result . append ( left . pop ( 0 )) else : result . append ( right . pop ( 0 )) return result + left + right length = len ( list_2d ) if length <= 1 : return list_2d middle = length // 2 return merge ( sortlist_2d ( list_2d [: middle ]), sortlist_2d ( list_2d [ middle :])) if len ( collection ) <= 1 : return collection \"\"\" Group the items into two pairs, and leave one element if there is a last odd item. Example: [999, 100, 75, 40, 10000] -> [999, 100], [75, 40]. Leave 10000. \"\"\" two_paired_list = [] has_last_odd_item = False for i in range ( 0 , len ( collection ), 2 ): if i == len ( collection ) - 1 : has_last_odd_item = True else : \"\"\" Sort two-pairs in each groups. Example: [999, 100], [75, 40] -> [100, 999], [40, 75] \"\"\" if collection [ i ] < collection [ i + 1 ]: two_paired_list . append ([ collection [ i ], collection [ i + 1 ]]) else : two_paired_list . append ([ collection [ i + 1 ], collection [ i ]]) \"\"\" Sort two_paired_list. Example: [100, 999], [40, 75] -> [40, 75], [100, 999] \"\"\" sorted_list_2d = sortlist_2d ( two_paired_list ) \"\"\" 40 < 100 is sure because it has already been sorted. Generate the sorted_list of them so that you can avoid unnecessary comparison. Example: group0 group1 40 100 75 999 -> group0 group1 [40, 100] 75 999 \"\"\" result = [ i [ 0 ] for i in sorted_list_2d ] \"\"\" 100 < 999 is sure because it has already been sorted. Put 999 in last of the sorted_list so that you can avoid unnecessary comparison. Example: group0 group1 [40, 100] 75 999 -> group0 group1 [40, 100, 999] 75 \"\"\" result . append ( sorted_list_2d [ - 1 ][ 1 ]) \"\"\" Insert the last odd item left if there is. Example: group0 group1 [40, 100, 999] 75 -> group0 group1 [40, 100, 999, 10000] 75 \"\"\" if has_last_odd_item : pivot = collection [ - 1 ] result = binary_search_insertion ( result , pivot ) \"\"\" Insert the remaining items. In this case, 40 < 75 is sure because it has already been sorted. Therefore, you only need to insert 75 into [100, 999, 10000], so that you can avoid unnecessary comparison. Example: group0 group1 [40, 100, 999, 10000] ^ You don't need to compare with this as 40 < 75 is already sure. 75 -> [40, 75, 100, 999, 10000] \"\"\" is_last_odd_item_inserted_before_this_index = False for i in range ( len ( sorted_list_2d ) - 1 ): if result [ i ] == collection [ - i ]: is_last_odd_item_inserted_before_this_index = True pivot = sorted_list_2d [ i ][ 1 ] # If last_odd_item is inserted before the item's index, # you should forward index one more. if is_last_odd_item_inserted_before_this_index : result = result [: i + 2 ] + binary_search_insertion ( result [ i + 2 :], pivot ) else : result = result [: i + 1 ] + binary_search_insertion ( result [ i + 1 :], pivot ) return result if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( merge_insertion_sort ( unsorted ))","title":"Merge insertion sort"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_insertion_sort/#_2","text":"\"\"\" This is a pure Python implementation of the merge-insertion sort algorithm Source: https://en.wikipedia.org/wiki/Merge-insertion_sort For doctests run following command: python3 -m doctest -v merge_insertion_sort.py or python -m doctest -v merge_insertion_sort.py For manual testing run: python3 merge_insertion_sort.py \"\"\" from __future__ import annotations def merge_insertion_sort ( collection : list [ int ]) -> list [ int ]: \"\"\"Pure implementation of merge-insertion sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> merge_insertion_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_insertion_sort([99]) [99] >>> merge_insertion_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def binary_search_insertion ( sorted_list , item ): left = 0 right = len ( sorted_list ) - 1 while left <= right : middle = ( left + right ) // 2 if left == right : if sorted_list [ middle ] < item : left = middle + 1 break elif sorted_list [ middle ] < item : left = middle + 1 else : right = middle - 1 sorted_list . insert ( left , item ) return sorted_list def sortlist_2d ( list_2d ): def merge ( left , right ): result = [] while left and right : if left [ 0 ][ 0 ] < right [ 0 ][ 0 ]: result . append ( left . pop ( 0 )) else : result . append ( right . pop ( 0 )) return result + left + right length = len ( list_2d ) if length <= 1 : return list_2d middle = length // 2 return merge ( sortlist_2d ( list_2d [: middle ]), sortlist_2d ( list_2d [ middle :])) if len ( collection ) <= 1 : return collection \"\"\" Group the items into two pairs, and leave one element if there is a last odd item. Example: [999, 100, 75, 40, 10000] -> [999, 100], [75, 40]. Leave 10000. \"\"\" two_paired_list = [] has_last_odd_item = False for i in range ( 0 , len ( collection ), 2 ): if i == len ( collection ) - 1 : has_last_odd_item = True else : \"\"\" Sort two-pairs in each groups. Example: [999, 100], [75, 40] -> [100, 999], [40, 75] \"\"\" if collection [ i ] < collection [ i + 1 ]: two_paired_list . append ([ collection [ i ], collection [ i + 1 ]]) else : two_paired_list . append ([ collection [ i + 1 ], collection [ i ]]) \"\"\" Sort two_paired_list. Example: [100, 999], [40, 75] -> [40, 75], [100, 999] \"\"\" sorted_list_2d = sortlist_2d ( two_paired_list ) \"\"\" 40 < 100 is sure because it has already been sorted. Generate the sorted_list of them so that you can avoid unnecessary comparison. Example: group0 group1 40 100 75 999 -> group0 group1 [40, 100] 75 999 \"\"\" result = [ i [ 0 ] for i in sorted_list_2d ] \"\"\" 100 < 999 is sure because it has already been sorted. Put 999 in last of the sorted_list so that you can avoid unnecessary comparison. Example: group0 group1 [40, 100] 75 999 -> group0 group1 [40, 100, 999] 75 \"\"\" result . append ( sorted_list_2d [ - 1 ][ 1 ]) \"\"\" Insert the last odd item left if there is. Example: group0 group1 [40, 100, 999] 75 -> group0 group1 [40, 100, 999, 10000] 75 \"\"\" if has_last_odd_item : pivot = collection [ - 1 ] result = binary_search_insertion ( result , pivot ) \"\"\" Insert the remaining items. In this case, 40 < 75 is sure because it has already been sorted. Therefore, you only need to insert 75 into [100, 999, 10000], so that you can avoid unnecessary comparison. Example: group0 group1 [40, 100, 999, 10000] ^ You don't need to compare with this as 40 < 75 is already sure. 75 -> [40, 75, 100, 999, 10000] \"\"\" is_last_odd_item_inserted_before_this_index = False for i in range ( len ( sorted_list_2d ) - 1 ): if result [ i ] == collection [ - i ]: is_last_odd_item_inserted_before_this_index = True pivot = sorted_list_2d [ i ][ 1 ] # If last_odd_item is inserted before the item's index, # you should forward index one more. if is_last_odd_item_inserted_before_this_index : result = result [: i + 2 ] + binary_search_insertion ( result [ i + 2 :], pivot ) else : result = result [: i + 1 ] + binary_search_insertion ( result [ i + 1 :], pivot ) return result if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( merge_insertion_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the merge sort algorithm For doctests run following command: python -m doctest -v merge_sort.py or python3 -m doctest -v merge_sort.py For manual testing run: python merge_sort.py \"\"\" def merge_sort ( collection : list ) -> list : \"\"\"Pure implementation of the merge sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> merge_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_sort([]) [] >>> merge_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def merge ( left : list , right : list ) -> list : \"\"\"merge left and right :param left: left collection :param right: right collection :return: merge result \"\"\" def _merge (): while left and right : yield ( left if left [ 0 ] <= right [ 0 ] else right ) . pop ( 0 ) yield from left yield from right return list ( _merge ()) if len ( collection ) <= 1 : return collection mid = len ( collection ) // 2 return merge ( merge_sort ( collection [: mid ]), merge_sort ( collection [ mid :])) if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( * merge_sort ( unsorted ), sep = \",\" )","title":"Merge sort"},{"location":"content/algorithms/implementations/sorts/merge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/merge_sort/#_2","text":"\"\"\" This is a pure Python implementation of the merge sort algorithm For doctests run following command: python -m doctest -v merge_sort.py or python3 -m doctest -v merge_sort.py For manual testing run: python merge_sort.py \"\"\" def merge_sort ( collection : list ) -> list : \"\"\"Pure implementation of the merge sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> merge_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_sort([]) [] >>> merge_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" def merge ( left : list , right : list ) -> list : \"\"\"merge left and right :param left: left collection :param right: right collection :return: merge result \"\"\" def _merge (): while left and right : yield ( left if left [ 0 ] <= right [ 0 ] else right ) . pop ( 0 ) yield from left yield from right return list ( _merge ()) if len ( collection ) <= 1 : return collection mid = len ( collection ) // 2 return merge ( merge_sort ( collection [: mid ]), merge_sort ( collection [ mid :])) if __name__ == \"__main__\" : import doctest doctest . testmod () user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( * merge_sort ( unsorted ), sep = \",\" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6","title":"Normal distribution quick sort"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/normal_distribution_quick_sort/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is an implementation of odd-even transposition sort. It works by performing a series of parallel swaps between odd and even pairs of variables in the list. This implementation represents each variable in the list with a process and each process communicates with its neighboring processes in the list to perform comparisons. They are synchronized with locks and message passing but other forms of synchronization could be used. \"\"\" from multiprocessing import Lock , Pipe , Process # lock used to ensure that two processes do not access a pipe at the same time processLock = Lock () \"\"\" The function run by the processes that sorts the list position = the position in the list the process represents, used to know which neighbor we pass our value to value = the initial value at list[position] LSend, RSend = the pipes we use to send to our left and right neighbors LRcv, RRcv = the pipes we use to receive from our left and right neighbors resultPipe = the pipe used to send results back to main \"\"\" def oeProcess ( position , value , LSend , RSend , LRcv , RRcv , resultPipe ): global processLock # we perform n swaps since after n swaps we know we are sorted # we *could* stop early if we are sorted already, but it takes as long to # find out we are sorted as it does to sort the list with this algorithm for i in range ( 0 , 10 ): if ( i + position ) % 2 == 0 and RSend is not None : # send your value to your right neighbor processLock . acquire () RSend [ 1 ] . send ( value ) processLock . release () # receive your right neighbor's value processLock . acquire () temp = RRcv [ 0 ] . recv () processLock . release () # take the lower value since you are on the left value = min ( value , temp ) elif ( i + position ) % 2 != 0 and LSend is not None : # send your value to your left neighbor processLock . acquire () LSend [ 1 ] . send ( value ) processLock . release () # receive your left neighbor's value processLock . acquire () temp = LRcv [ 0 ] . recv () processLock . release () # take the higher value since you are on the right value = max ( value , temp ) # after all swaps are performed, send the values back to main resultPipe [ 1 ] . send ( value ) \"\"\" the function which creates the processes that perform the parallel swaps arr = the list to be sorted \"\"\" def OddEvenTransposition ( arr ): processArray = [] resultPipe = [] # initialize the list of pipes where the values will be retrieved for _ in arr : resultPipe . append ( Pipe ()) # creates the processes # the first and last process only have one neighbor so they are made outside # of the loop tempRs = Pipe () tempRr = Pipe () processArray . append ( Process ( target = oeProcess , args = ( 0 , arr [ 0 ], None , tempRs , None , tempRr , resultPipe [ 0 ]), ) ) tempLr = tempRs tempLs = tempRr for i in range ( 1 , len ( arr ) - 1 ): tempRs = Pipe () tempRr = Pipe () processArray . append ( Process ( target = oeProcess , args = ( i , arr [ i ], tempLs , tempRs , tempLr , tempRr , resultPipe [ i ]), ) ) tempLr = tempRs tempLs = tempRr processArray . append ( Process ( target = oeProcess , args = ( len ( arr ) - 1 , arr [ len ( arr ) - 1 ], tempLs , None , tempLr , None , resultPipe [ len ( arr ) - 1 ], ), ) ) # start the processes for p in processArray : p . start () # wait for the processes to end and write their values to the list for p in range ( 0 , len ( resultPipe )): arr [ p ] = resultPipe [ p ][ 0 ] . recv () processArray [ p ] . join () return arr # creates a reverse sorted list and sorts it def main (): arr = list ( range ( 10 , 0 , - 1 )) print ( \"Initial List\" ) print ( * arr ) arr = OddEvenTransposition ( arr ) print ( \"Sorted List \\n \" ) print ( * arr ) if __name__ == \"__main__\" : main ()","title":"Odd even transposition parallel"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_parallel/#_2","text":"\"\"\" This is an implementation of odd-even transposition sort. It works by performing a series of parallel swaps between odd and even pairs of variables in the list. This implementation represents each variable in the list with a process and each process communicates with its neighboring processes in the list to perform comparisons. They are synchronized with locks and message passing but other forms of synchronization could be used. \"\"\" from multiprocessing import Lock , Pipe , Process # lock used to ensure that two processes do not access a pipe at the same time processLock = Lock () \"\"\" The function run by the processes that sorts the list position = the position in the list the process represents, used to know which neighbor we pass our value to value = the initial value at list[position] LSend, RSend = the pipes we use to send to our left and right neighbors LRcv, RRcv = the pipes we use to receive from our left and right neighbors resultPipe = the pipe used to send results back to main \"\"\" def oeProcess ( position , value , LSend , RSend , LRcv , RRcv , resultPipe ): global processLock # we perform n swaps since after n swaps we know we are sorted # we *could* stop early if we are sorted already, but it takes as long to # find out we are sorted as it does to sort the list with this algorithm for i in range ( 0 , 10 ): if ( i + position ) % 2 == 0 and RSend is not None : # send your value to your right neighbor processLock . acquire () RSend [ 1 ] . send ( value ) processLock . release () # receive your right neighbor's value processLock . acquire () temp = RRcv [ 0 ] . recv () processLock . release () # take the lower value since you are on the left value = min ( value , temp ) elif ( i + position ) % 2 != 0 and LSend is not None : # send your value to your left neighbor processLock . acquire () LSend [ 1 ] . send ( value ) processLock . release () # receive your left neighbor's value processLock . acquire () temp = LRcv [ 0 ] . recv () processLock . release () # take the higher value since you are on the right value = max ( value , temp ) # after all swaps are performed, send the values back to main resultPipe [ 1 ] . send ( value ) \"\"\" the function which creates the processes that perform the parallel swaps arr = the list to be sorted \"\"\" def OddEvenTransposition ( arr ): processArray = [] resultPipe = [] # initialize the list of pipes where the values will be retrieved for _ in arr : resultPipe . append ( Pipe ()) # creates the processes # the first and last process only have one neighbor so they are made outside # of the loop tempRs = Pipe () tempRr = Pipe () processArray . append ( Process ( target = oeProcess , args = ( 0 , arr [ 0 ], None , tempRs , None , tempRr , resultPipe [ 0 ]), ) ) tempLr = tempRs tempLs = tempRr for i in range ( 1 , len ( arr ) - 1 ): tempRs = Pipe () tempRr = Pipe () processArray . append ( Process ( target = oeProcess , args = ( i , arr [ i ], tempLs , tempRs , tempLr , tempRr , resultPipe [ i ]), ) ) tempLr = tempRs tempLs = tempRr processArray . append ( Process ( target = oeProcess , args = ( len ( arr ) - 1 , arr [ len ( arr ) - 1 ], tempLs , None , tempLr , None , resultPipe [ len ( arr ) - 1 ], ), ) ) # start the processes for p in processArray : p . start () # wait for the processes to end and write their values to the list for p in range ( 0 , len ( resultPipe )): arr [ p ] = resultPipe [ p ][ 0 ] . recv () processArray [ p ] . join () return arr # creates a reverse sorted list and sorts it def main (): arr = list ( range ( 10 , 0 , - 1 )) print ( \"Initial List\" ) print ( * arr ) arr = OddEvenTransposition ( arr ) print ( \"Sorted List \\n \" ) print ( * arr ) if __name__ == \"__main__\" : main ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Source: https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort This is a non-parallelized implementation of odd-even transpostiion sort. Normally the swaps in each set happen simultaneously, without that the algorithm is no better than bubble sort. \"\"\" def odd_even_transposition ( arr : list ) -> list : \"\"\" >>> odd_even_transposition([5, 4, 3, 2, 1]) [1, 2, 3, 4, 5] >>> odd_even_transposition([13, 11, 18, 0, -1]) [-1, 0, 11, 13, 18] >>> odd_even_transposition([-.1, 1.1, .1, -2.9]) [-2.9, -0.1, 0.1, 1.1] \"\"\" arr_size = len ( arr ) for _ in range ( arr_size ): for i in range ( _ % 2 , arr_size - 1 , 2 ): if arr [ i + 1 ] < arr [ i ]: arr [ i ], arr [ i + 1 ] = arr [ i + 1 ], arr [ i ] return arr if __name__ == \"__main__\" : arr = list ( range ( 10 , 0 , - 1 )) print ( f \"Original: { arr } . Sorted: { odd_even_transposition ( arr ) } \" )","title":"Odd even transposition single threaded"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/odd_even_transposition_single_threaded/#_2","text":"\"\"\" Source: https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort This is a non-parallelized implementation of odd-even transpostiion sort. Normally the swaps in each set happen simultaneously, without that the algorithm is no better than bubble sort. \"\"\" def odd_even_transposition ( arr : list ) -> list : \"\"\" >>> odd_even_transposition([5, 4, 3, 2, 1]) [1, 2, 3, 4, 5] >>> odd_even_transposition([13, 11, 18, 0, -1]) [-1, 0, 11, 13, 18] >>> odd_even_transposition([-.1, 1.1, .1, -2.9]) [-2.9, -0.1, 0.1, 1.1] \"\"\" arr_size = len ( arr ) for _ in range ( arr_size ): for i in range ( _ % 2 , arr_size - 1 , 2 ): if arr [ i + 1 ] < arr [ i ]: arr [ i ], arr [ i + 1 ] = arr [ i + 1 ], arr [ i ] return arr if __name__ == \"__main__\" : arr = list ( range ( 10 , 0 , - 1 )) print ( f \"Original: { arr } . Sorted: { odd_even_transposition ( arr ) } \" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pancake_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the pancake sort algorithm For doctests run following command: python3 -m doctest -v pancake_sort.py or python -m doctest -v pancake_sort.py For manual testing run: python pancake_sort.py \"\"\" def pancake_sort ( arr ): \"\"\"Sort Array with Pancake Sort. :param arr: Collection containing comparable items :return: Collection ordered in ascending order of items Examples: >>> pancake_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> pancake_sort([]) [] >>> pancake_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" cur = len ( arr ) while cur > 1 : # Find the maximum number in arr mi = arr . index ( max ( arr [ 0 : cur ])) # Reverse from 0 to mi arr = arr [ mi :: - 1 ] + arr [ mi + 1 : len ( arr )] # Reverse whole list arr = arr [ cur - 1 :: - 1 ] + arr [ cur : len ( arr )] cur -= 1 return arr if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( pancake_sort ( unsorted ))","title":"Pancake sort"},{"location":"content/algorithms/implementations/sorts/pancake_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pancake_sort/#_2","text":"\"\"\" This is a pure Python implementation of the pancake sort algorithm For doctests run following command: python3 -m doctest -v pancake_sort.py or python -m doctest -v pancake_sort.py For manual testing run: python pancake_sort.py \"\"\" def pancake_sort ( arr ): \"\"\"Sort Array with Pancake Sort. :param arr: Collection containing comparable items :return: Collection ordered in ascending order of items Examples: >>> pancake_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> pancake_sort([]) [] >>> pancake_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" cur = len ( arr ) while cur > 1 : # Find the maximum number in arr mi = arr . index ( max ( arr [ 0 : cur ])) # Reverse from 0 to mi arr = arr [ mi :: - 1 ] + arr [ mi + 1 : len ( arr )] # Reverse whole list arr = arr [ cur - 1 :: - 1 ] + arr [ cur : len ( arr )] cur -= 1 return arr if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( pancake_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is an implementation of Pigeon Hole Sort. For doctests run following command: python3 -m doctest -v pigeon_sort.py or python -m doctest -v pigeon_sort.py For manual testing run: python pigeon_sort.py \"\"\" def pigeon_sort ( array ): \"\"\" Implementation of pigeon hole sort algorithm :param array: Collection of comparable items :return: Collection sorted in ascending order >>> pigeon_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> pigeon_sort([]) [] >>> pigeon_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" if len ( array ) == 0 : return array # Manually finds the minimum and maximum of the array. min = array [ 0 ] max = array [ 0 ] for i in range ( len ( array )): if array [ i ] < min : min = array [ i ] elif array [ i ] > max : max = array [ i ] # Compute the variables holes_range = max - min + 1 holes = [ 0 for _ in range ( holes_range )] holes_repeat = [ 0 for _ in range ( holes_range )] # Make the sorting. for i in range ( len ( array )): index = array [ i ] - min if holes [ index ] != array [ i ]: holes [ index ] = array [ i ] holes_repeat [ index ] += 1 else : holes_repeat [ index ] += 1 # Makes the array back by replacing the numbers. index = 0 for i in range ( holes_range ): while holes_repeat [ i ] > 0 : array [ index ] = holes [ i ] index += 1 holes_repeat [ i ] -= 1 # Returns the sorted array. return array if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by comma: \\n \" ) unsorted = [ int ( x ) for x in user_input . split ( \",\" )] print ( pigeon_sort ( unsorted ))","title":"Pigeon sort"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeon_sort/#_2","text":"\"\"\" This is an implementation of Pigeon Hole Sort. For doctests run following command: python3 -m doctest -v pigeon_sort.py or python -m doctest -v pigeon_sort.py For manual testing run: python pigeon_sort.py \"\"\" def pigeon_sort ( array ): \"\"\" Implementation of pigeon hole sort algorithm :param array: Collection of comparable items :return: Collection sorted in ascending order >>> pigeon_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> pigeon_sort([]) [] >>> pigeon_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" if len ( array ) == 0 : return array # Manually finds the minimum and maximum of the array. min = array [ 0 ] max = array [ 0 ] for i in range ( len ( array )): if array [ i ] < min : min = array [ i ] elif array [ i ] > max : max = array [ i ] # Compute the variables holes_range = max - min + 1 holes = [ 0 for _ in range ( holes_range )] holes_repeat = [ 0 for _ in range ( holes_range )] # Make the sorting. for i in range ( len ( array )): index = array [ i ] - min if holes [ index ] != array [ i ]: holes [ index ] = array [ i ] holes_repeat [ index ] += 1 else : holes_repeat [ index ] += 1 # Makes the array back by replacing the numbers. index = 0 for i in range ( holes_range ): while holes_repeat [ i ] > 0 : array [ index ] = holes [ i ] index += 1 holes_repeat [ i ] -= 1 # Returns the sorted array. return array if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by comma: \\n \" ) unsorted = [ int ( x ) for x in user_input . split ( \",\" )] print ( pigeon_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 # Python program to implement Pigeonhole Sorting in python # Algorithm for the pigeonhole sorting def pigeonhole_sort ( a ): \"\"\" >>> a = [8, 3, 2, 7, 4, 6, 8] >>> b = sorted(a) # a nondestructive sort >>> pigeonhole_sort(a) # a destructive sort >>> a == b True \"\"\" # size of range of values in the list (ie, number of pigeonholes we need) min_val = min ( a ) # min() finds the minimum value max_val = max ( a ) # max() finds the maximum value size = max_val - min_val + 1 # size is difference of max and min values plus one # list of pigeonholes of size equal to the variable size holes = [ 0 ] * size # Populate the pigeonholes. for x in a : assert isinstance ( x , int ), \"integers only please\" holes [ x - min_val ] += 1 # Putting the elements back into the array in an order. i = 0 for count in range ( size ): while holes [ count ] > 0 : holes [ count ] -= 1 a [ i ] = count + min_val i += 1 def main (): a = [ 8 , 3 , 2 , 7 , 4 , 6 , 8 ] pigeonhole_sort ( a ) print ( \"Sorted order is:\" , \" \" . join ( a )) if __name__ == \"__main__\" : main ()","title":"Pigeonhole sort"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/pigeonhole_sort/#_2","text":"# Python program to implement Pigeonhole Sorting in python # Algorithm for the pigeonhole sorting def pigeonhole_sort ( a ): \"\"\" >>> a = [8, 3, 2, 7, 4, 6, 8] >>> b = sorted(a) # a nondestructive sort >>> pigeonhole_sort(a) # a destructive sort >>> a == b True \"\"\" # size of range of values in the list (ie, number of pigeonholes we need) min_val = min ( a ) # min() finds the minimum value max_val = max ( a ) # max() finds the maximum value size = max_val - min_val + 1 # size is difference of max and min values plus one # list of pigeonholes of size equal to the variable size holes = [ 0 ] * size # Populate the pigeonholes. for x in a : assert isinstance ( x , int ), \"integers only please\" holes [ x - min_val ] += 1 # Putting the elements back into the array in an order. i = 0 for count in range ( size ): while holes [ count ] > 0 : holes [ count ] -= 1 a [ i ] = count + min_val i += 1 def main (): a = [ 8 , 3 , 2 , 7 , 4 , 6 , 8 ] pigeonhole_sort ( a ) print ( \"Sorted order is:\" , \" \" . join ( a )) if __name__ == \"__main__\" : main ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the quick sort algorithm For doctests run following command: python -m doctest -v quick_sort.py or python3 -m doctest -v quick_sort.py For manual testing run: python quick_sort.py \"\"\" def quick_sort ( collection ): \"\"\"Pure implementation of quick sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> quick_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> quick_sort([]) [] >>> quick_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" length = len ( collection ) if length <= 1 : return collection else : # Use the last element as the first pivot pivot = collection . pop () # Put elements greater than pivot in greater list # Put elements lesser than pivot in lesser list greater , lesser = [], [] for element in collection : if element > pivot : greater . append ( element ) else : lesser . append ( element ) return quick_sort ( lesser ) + [ pivot ] + quick_sort ( greater ) if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( quick_sort ( unsorted ))","title":"Quick sort"},{"location":"content/algorithms/implementations/sorts/quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort/#_2","text":"\"\"\" This is a pure Python implementation of the quick sort algorithm For doctests run following command: python -m doctest -v quick_sort.py or python3 -m doctest -v quick_sort.py For manual testing run: python quick_sort.py \"\"\" def quick_sort ( collection ): \"\"\"Pure implementation of quick sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> quick_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> quick_sort([]) [] >>> quick_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" length = len ( collection ) if length <= 1 : return collection else : # Use the last element as the first pivot pivot = collection . pop () # Put elements greater than pivot in greater list # Put elements lesser than pivot in lesser list greater , lesser = [], [] for element in collection : if element > pivot : greater . append ( element ) else : lesser . append ( element ) return quick_sort ( lesser ) + [ pivot ] + quick_sort ( greater ) if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( quick_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def quick_sort_3partition ( sorting : list , left : int , right : int ) -> None : if right <= left : return a = i = left b = right pivot = sorting [ left ] while i <= b : if sorting [ i ] < pivot : sorting [ a ], sorting [ i ] = sorting [ i ], sorting [ a ] a += 1 i += 1 elif sorting [ i ] > pivot : sorting [ b ], sorting [ i ] = sorting [ i ], sorting [ b ] b -= 1 else : i += 1 quick_sort_3partition ( sorting , left , a - 1 ) quick_sort_3partition ( sorting , b + 1 , right ) def three_way_radix_quicksort ( sorting : list ) -> list : \"\"\" Three-way radix quicksort: https://en.wikipedia.org/wiki/Quicksort#Three-way_radix_quicksort First divide the list into three parts. Then recursively sort the \"less than\" and \"greater than\" partitions. >>> three_way_radix_quicksort([]) [] >>> three_way_radix_quicksort([1]) [1] >>> three_way_radix_quicksort([-5, -2, 1, -2, 0, 1]) [-5, -2, -2, 0, 1, 1] >>> three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1]) [-1, 0, 0, 1, 1, 2, 2, 2, 5, 5] \"\"\" if len ( sorting ) <= 1 : return sorting return ( three_way_radix_quicksort ([ i for i in sorting if i < sorting [ 0 ]]) + [ i for i in sorting if i == sorting [ 0 ]] + three_way_radix_quicksort ([ i for i in sorting if i > sorting [ 0 ]]) ) if __name__ == \"__main__\" : import doctest doctest . testmod ( verbose = True ) user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] quick_sort_3partition ( unsorted , 0 , len ( unsorted ) - 1 ) print ( unsorted )","title":"Quick sort 3 partition"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/quick_sort_3_partition/#_2","text":"def quick_sort_3partition ( sorting : list , left : int , right : int ) -> None : if right <= left : return a = i = left b = right pivot = sorting [ left ] while i <= b : if sorting [ i ] < pivot : sorting [ a ], sorting [ i ] = sorting [ i ], sorting [ a ] a += 1 i += 1 elif sorting [ i ] > pivot : sorting [ b ], sorting [ i ] = sorting [ i ], sorting [ b ] b -= 1 else : i += 1 quick_sort_3partition ( sorting , left , a - 1 ) quick_sort_3partition ( sorting , b + 1 , right ) def three_way_radix_quicksort ( sorting : list ) -> list : \"\"\" Three-way radix quicksort: https://en.wikipedia.org/wiki/Quicksort#Three-way_radix_quicksort First divide the list into three parts. Then recursively sort the \"less than\" and \"greater than\" partitions. >>> three_way_radix_quicksort([]) [] >>> three_way_radix_quicksort([1]) [1] >>> three_way_radix_quicksort([-5, -2, 1, -2, 0, 1]) [-5, -2, -2, 0, 1, 1] >>> three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1]) [-1, 0, 0, 1, 1, 2, 2, 2, 5, 5] \"\"\" if len ( sorting ) <= 1 : return sorting return ( three_way_radix_quicksort ([ i for i in sorting if i < sorting [ 0 ]]) + [ i for i in sorting if i == sorting [ 0 ]] + three_way_radix_quicksort ([ i for i in sorting if i > sorting [ 0 ]]) ) if __name__ == \"__main__\" : import doctest doctest . testmod ( verbose = True ) user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] quick_sort_3partition ( unsorted , 0 , len ( unsorted ) - 1 ) print ( unsorted )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/radix_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 from __future__ import annotations def radix_sort ( list_of_ints : list [ int ]) -> list [ int ]: \"\"\" radix_sort(range(15)) == sorted(range(15)) True radix_sort(reversed(range(15))) == sorted(range(15)) True radix_sort([1,100,10,1000]) == sorted([1,100,10,1000]) True \"\"\" RADIX = 10 placement = 1 max_digit = max ( list_of_ints ) while placement <= max_digit : # declare and initialize empty buckets buckets = [ list () for _ in range ( RADIX )] # split list_of_ints between the buckets for i in list_of_ints : tmp = int (( i / placement ) % RADIX ) buckets [ tmp ] . append ( i ) # put each buckets' contents into list_of_ints a = 0 for b in range ( RADIX ): for i in buckets [ b ]: list_of_ints [ a ] = i a += 1 # move to next placement *= RADIX return list_of_ints","title":"Radix sort"},{"location":"content/algorithms/implementations/sorts/radix_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/radix_sort/#_2","text":"from __future__ import annotations def radix_sort ( list_of_ints : list [ int ]) -> list [ int ]: \"\"\" radix_sort(range(15)) == sorted(range(15)) True radix_sort(reversed(range(15))) == sorted(range(15)) True radix_sort([1,100,10,1000]) == sorted([1,100,10,1000]) True \"\"\" RADIX = 10 placement = 1 max_digit = max ( list_of_ints ) while placement <= max_digit : # declare and initialize empty buckets buckets = [ list () for _ in range ( RADIX )] # split list_of_ints between the buckets for i in list_of_ints : tmp = int (( i / placement ) % RADIX ) buckets [ tmp ] . append ( i ) # put each buckets' contents into list_of_ints a = 0 for b in range ( RADIX ): for i in buckets [ b ]: list_of_ints [ a ] = i a += 1 # move to next placement *= RADIX return list_of_ints","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 from random import randint from tempfile import TemporaryFile import numpy as np def _inPlaceQuickSort ( A , start , end ): count = 0 if start < end : pivot = randint ( start , end ) temp = A [ end ] A [ end ] = A [ pivot ] A [ pivot ] = temp p , count = _inPlacePartition ( A , start , end ) count += _inPlaceQuickSort ( A , start , p - 1 ) count += _inPlaceQuickSort ( A , p + 1 , end ) return count def _inPlacePartition ( A , start , end ): count = 0 pivot = randint ( start , end ) temp = A [ end ] A [ end ] = A [ pivot ] A [ pivot ] = temp newPivotIndex = start - 1 for index in range ( start , end ): count += 1 if A [ index ] < A [ end ]: # check if current val is less than pivot value newPivotIndex = newPivotIndex + 1 temp = A [ newPivotIndex ] A [ newPivotIndex ] = A [ index ] A [ index ] = temp temp = A [ newPivotIndex + 1 ] A [ newPivotIndex + 1 ] = A [ end ] A [ end ] = temp return newPivotIndex + 1 , count outfile = TemporaryFile () p = 100 # 1000 elements are to be sorted mu , sigma = 0 , 1 # mean and standard deviation X = np . random . normal ( mu , sigma , p ) np . save ( outfile , X ) print ( \"The array is\" ) print ( X ) outfile . seek ( 0 ) # using the same array M = np . load ( outfile ) r = len ( M ) - 1 z = _inPlaceQuickSort ( M , 0 , r ) print ( \"No of Comparisons for 100 elements selected from a standard normal distribution\" \"is :\" ) print ( z )","title":"Random normal distribution quicksort"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_normal_distribution_quicksort/#_2","text":"from random import randint from tempfile import TemporaryFile import numpy as np def _inPlaceQuickSort ( A , start , end ): count = 0 if start < end : pivot = randint ( start , end ) temp = A [ end ] A [ end ] = A [ pivot ] A [ pivot ] = temp p , count = _inPlacePartition ( A , start , end ) count += _inPlaceQuickSort ( A , start , p - 1 ) count += _inPlaceQuickSort ( A , p + 1 , end ) return count def _inPlacePartition ( A , start , end ): count = 0 pivot = randint ( start , end ) temp = A [ end ] A [ end ] = A [ pivot ] A [ pivot ] = temp newPivotIndex = start - 1 for index in range ( start , end ): count += 1 if A [ index ] < A [ end ]: # check if current val is less than pivot value newPivotIndex = newPivotIndex + 1 temp = A [ newPivotIndex ] A [ newPivotIndex ] = A [ index ] A [ index ] = temp temp = A [ newPivotIndex + 1 ] A [ newPivotIndex + 1 ] = A [ end ] A [ end ] = temp return newPivotIndex + 1 , count outfile = TemporaryFile () p = 100 # 1000 elements are to be sorted mu , sigma = 0 , 1 # mean and standard deviation X = np . random . normal ( mu , sigma , p ) np . save ( outfile , X ) print ( \"The array is\" ) print ( X ) outfile . seek ( 0 ) # using the same array M = np . load ( outfile ) r = len ( M ) - 1 z = _inPlaceQuickSort ( M , 0 , r ) print ( \"No of Comparisons for 100 elements selected from a standard normal distribution\" \"is :\" ) print ( z )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Picks the random index as the pivot \"\"\" import random def partition ( A , left_index , right_index ): pivot = A [ left_index ] i = left_index + 1 for j in range ( left_index + 1 , right_index ): if A [ j ] < pivot : A [ j ], A [ i ] = A [ i ], A [ j ] i += 1 A [ left_index ], A [ i - 1 ] = A [ i - 1 ], A [ left_index ] return i - 1 def quick_sort_random ( A , left , right ): if left < right : pivot = random . randint ( left , right - 1 ) A [ pivot ], A [ left ] = ( A [ left ], A [ pivot ], ) # switches the pivot with the left most bound pivot_index = partition ( A , left , right ) quick_sort_random ( A , left , pivot_index ) # recursive quicksort to the left of the pivot point quick_sort_random ( A , pivot_index + 1 , right ) # recursive quicksort to the right of the pivot point def main (): user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () arr = [ int ( item ) for item in user_input . split ( \",\" )] quick_sort_random ( arr , 0 , len ( arr )) print ( arr ) if __name__ == \"__main__\" : main ()","title":"Random pivot quick sort"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/random_pivot_quick_sort/#_2","text":"\"\"\" Picks the random index as the pivot \"\"\" import random def partition ( A , left_index , right_index ): pivot = A [ left_index ] i = left_index + 1 for j in range ( left_index + 1 , right_index ): if A [ j ] < pivot : A [ j ], A [ i ] = A [ i ], A [ j ] i += 1 A [ left_index ], A [ i - 1 ] = A [ i - 1 ], A [ left_index ] return i - 1 def quick_sort_random ( A , left , right ): if left < right : pivot = random . randint ( left , right - 1 ) A [ pivot ], A [ left ] = ( A [ left ], A [ pivot ], ) # switches the pivot with the left most bound pivot_index = partition ( A , left , right ) quick_sort_random ( A , left , pivot_index ) # recursive quicksort to the left of the pivot point quick_sort_random ( A , pivot_index + 1 , right ) # recursive quicksort to the right of the pivot point def main (): user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () arr = [ int ( item ) for item in user_input . split ( \",\" )] quick_sort_random ( arr , 0 , len ( arr )) print ( arr ) if __name__ == \"__main__\" : main ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def bubble_sort ( list_data : list , length : int = 0 ) -> list : \"\"\" It is similar is bubble sort but recursive. :param list_data: mutable ordered sequence of elements :param length: length of list data :return: the same list in ascending order >>> bubble_sort([0, 5, 2, 3, 2], 5) [0, 2, 2, 3, 5] >>> bubble_sort([], 0) [] >>> bubble_sort([-2, -45, -5], 3) [-45, -5, -2] >>> bubble_sort([-23, 0, 6, -4, 34], 5) [-23, -4, 0, 6, 34] >>> bubble_sort([-23, 0, 6, -4, 34], 5) == sorted([-23, 0, 6, -4, 34]) True >>> bubble_sort(['z','a','y','b','x','c'], 6) ['a', 'b', 'c', 'x', 'y', 'z'] >>> bubble_sort([1.1, 3.3, 5.5, 7.7, 2.2, 4.4, 6.6]) [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7] \"\"\" length = length or len ( list_data ) swapped = False for i in range ( length - 1 ): if list_data [ i ] > list_data [ i + 1 ]: list_data [ i ], list_data [ i + 1 ] = list_data [ i + 1 ], list_data [ i ] swapped = True return list_data if not swapped else bubble_sort ( list_data , length - 1 ) if __name__ == \"__main__\" : import doctest doctest . testmod ()","title":"Recursive bubble sort"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_bubble_sort/#_2","text":"def bubble_sort ( list_data : list , length : int = 0 ) -> list : \"\"\" It is similar is bubble sort but recursive. :param list_data: mutable ordered sequence of elements :param length: length of list data :return: the same list in ascending order >>> bubble_sort([0, 5, 2, 3, 2], 5) [0, 2, 2, 3, 5] >>> bubble_sort([], 0) [] >>> bubble_sort([-2, -45, -5], 3) [-45, -5, -2] >>> bubble_sort([-23, 0, 6, -4, 34], 5) [-23, -4, 0, 6, 34] >>> bubble_sort([-23, 0, 6, -4, 34], 5) == sorted([-23, 0, 6, -4, 34]) True >>> bubble_sort(['z','a','y','b','x','c'], 6) ['a', 'b', 'c', 'x', 'y', 'z'] >>> bubble_sort([1.1, 3.3, 5.5, 7.7, 2.2, 4.4, 6.6]) [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7] \"\"\" length = length or len ( list_data ) swapped = False for i in range ( length - 1 ): if list_data [ i ] > list_data [ i + 1 ]: list_data [ i ], list_data [ i + 1 ] = list_data [ i + 1 ], list_data [ i ] swapped = True return list_data if not swapped else bubble_sort ( list_data , length - 1 ) if __name__ == \"__main__\" : import doctest doctest . testmod ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" A recursive implementation of the insertion sort algorithm \"\"\" from __future__ import annotations def rec_insertion_sort ( collection : list , n : int ): \"\"\" Given a collection of numbers and its length, sorts the collections in ascending order :param collection: A mutable collection of comparable elements :param n: The length of collections >>> col = [1, 2, 1] >>> rec_insertion_sort(col, len(col)) >>> print(col) [1, 1, 2] >>> col = [2, 1, 0, -1, -2] >>> rec_insertion_sort(col, len(col)) >>> print(col) [-2, -1, 0, 1, 2] >>> col = [1] >>> rec_insertion_sort(col, len(col)) >>> print(col) [1] \"\"\" # Checks if the entire collection has been sorted if len ( collection ) <= 1 or n <= 1 : return insert_next ( collection , n - 1 ) rec_insertion_sort ( collection , n - 1 ) def insert_next ( collection : list , index : int ): \"\"\" Inserts the '(index-1)th' element into place >>> col = [3, 2, 4, 2] >>> insert_next(col, 1) >>> print(col) [2, 3, 4, 2] >>> col = [3, 2, 3] >>> insert_next(col, 2) >>> print(col) [3, 2, 3] >>> col = [] >>> insert_next(col, 1) >>> print(col) [] \"\"\" # Checks order between adjacent elements if index >= len ( collection ) or collection [ index - 1 ] <= collection [ index ]: return # Swaps adjacent elements since they are not in ascending order collection [ index - 1 ], collection [ index ] = ( collection [ index ], collection [ index - 1 ], ) insert_next ( collection , index + 1 ) if __name__ == \"__main__\" : numbers = input ( \"Enter integers separated by spaces: \" ) numbers = [ int ( num ) for num in numbers . split ()] rec_insertion_sort ( numbers , len ( numbers )) print ( numbers )","title":"Recursive insertion sort"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_insertion_sort/#_2","text":"\"\"\" A recursive implementation of the insertion sort algorithm \"\"\" from __future__ import annotations def rec_insertion_sort ( collection : list , n : int ): \"\"\" Given a collection of numbers and its length, sorts the collections in ascending order :param collection: A mutable collection of comparable elements :param n: The length of collections >>> col = [1, 2, 1] >>> rec_insertion_sort(col, len(col)) >>> print(col) [1, 1, 2] >>> col = [2, 1, 0, -1, -2] >>> rec_insertion_sort(col, len(col)) >>> print(col) [-2, -1, 0, 1, 2] >>> col = [1] >>> rec_insertion_sort(col, len(col)) >>> print(col) [1] \"\"\" # Checks if the entire collection has been sorted if len ( collection ) <= 1 or n <= 1 : return insert_next ( collection , n - 1 ) rec_insertion_sort ( collection , n - 1 ) def insert_next ( collection : list , index : int ): \"\"\" Inserts the '(index-1)th' element into place >>> col = [3, 2, 4, 2] >>> insert_next(col, 1) >>> print(col) [2, 3, 4, 2] >>> col = [3, 2, 3] >>> insert_next(col, 2) >>> print(col) [3, 2, 3] >>> col = [] >>> insert_next(col, 1) >>> print(col) [] \"\"\" # Checks order between adjacent elements if index >= len ( collection ) or collection [ index - 1 ] <= collection [ index ]: return # Swaps adjacent elements since they are not in ascending order collection [ index - 1 ], collection [ index ] = ( collection [ index ], collection [ index - 1 ], ) insert_next ( collection , index + 1 ) if __name__ == \"__main__\" : numbers = input ( \"Enter integers separated by spaces: \" ) numbers = [ int ( num ) for num in numbers . split ()] rec_insertion_sort ( numbers , len ( numbers )) print ( numbers )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def quick_sort ( data : list ) -> list : \"\"\" >>> for data in ([2, 1, 0], [2.2, 1.1, 0], \"quick_sort\"): ... quick_sort(data) == sorted(data) True True True \"\"\" if len ( data ) <= 1 : return data else : return ( quick_sort ([ e for e in data [ 1 :] if e <= data [ 0 ]]) + [ data [ 0 ]] + quick_sort ([ e for e in data [ 1 :] if e > data [ 0 ]]) ) if __name__ == \"__main__\" : import doctest doctest . testmod ()","title":"Recursive quick sort"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/recursive_quick_sort/#_2","text":"def quick_sort ( data : list ) -> list : \"\"\" >>> for data in ([2, 1, 0], [2.2, 1.1, 0], \"quick_sort\"): ... quick_sort(data) == sorted(data) True True True \"\"\" if len ( data ) <= 1 : return data else : return ( quick_sort ([ e for e in data [ 1 :] if e <= data [ 0 ]]) + [ data [ 0 ]] + quick_sort ([ e for e in data [ 1 :] if e > data [ 0 ]]) ) if __name__ == \"__main__\" : import doctest doctest . testmod ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/selection_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the selection sort algorithm For doctests run following command: python -m doctest -v selection_sort.py or python3 -m doctest -v selection_sort.py For manual testing run: python selection_sort.py \"\"\" def selection_sort ( collection ): \"\"\"Pure implementation of the selection sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> selection_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> selection_sort([]) [] >>> selection_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" length = len ( collection ) for i in range ( length - 1 ): least = i for k in range ( i + 1 , length ): if collection [ k ] < collection [ least ]: least = k if least != i : collection [ least ], collection [ i ] = ( collection [ i ], collection [ least ]) return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( selection_sort ( unsorted ))","title":"Selection sort"},{"location":"content/algorithms/implementations/sorts/selection_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/selection_sort/#_2","text":"\"\"\" This is a pure Python implementation of the selection sort algorithm For doctests run following command: python -m doctest -v selection_sort.py or python3 -m doctest -v selection_sort.py For manual testing run: python selection_sort.py \"\"\" def selection_sort ( collection ): \"\"\"Pure implementation of the selection sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> selection_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> selection_sort([]) [] >>> selection_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" length = len ( collection ) for i in range ( length - 1 ): least = i for k in range ( i + 1 , length ): if collection [ k ] < collection [ least ]: least = k if least != i : collection [ least ], collection [ i ] = ( collection [ i ], collection [ least ]) return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( selection_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/shell_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" This is a pure Python implementation of the shell sort algorithm For doctests run following command: python -m doctest -v shell_sort.py or python3 -m doctest -v shell_sort.py For manual testing run: python shell_sort.py \"\"\" def shell_sort ( collection ): \"\"\"Pure implementation of shell sort algorithm in Python :param collection: Some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending >>> shell_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> shell_sort([]) [] >>> shell_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" # Marcin Ciura's gap sequence gaps = [ 701 , 301 , 132 , 57 , 23 , 10 , 4 , 1 ] for gap in gaps : for i in range ( gap , len ( collection )): j = i while j >= gap and collection [ j ] < collection [ j - gap ]: collection [ j ], collection [ j - gap ] = collection [ j - gap ], collection [ j ] j -= gap return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( shell_sort ( unsorted ))","title":"Shell sort"},{"location":"content/algorithms/implementations/sorts/shell_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/shell_sort/#_2","text":"\"\"\" This is a pure Python implementation of the shell sort algorithm For doctests run following command: python -m doctest -v shell_sort.py or python3 -m doctest -v shell_sort.py For manual testing run: python shell_sort.py \"\"\" def shell_sort ( collection ): \"\"\"Pure implementation of shell sort algorithm in Python :param collection: Some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending >>> shell_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> shell_sort([]) [] >>> shell_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" # Marcin Ciura's gap sequence gaps = [ 701 , 301 , 132 , 57 , 23 , 10 , 4 , 1 ] for gap in gaps : for i in range ( gap , len ( collection )): j = i while j >= gap and collection [ j ] < collection [ j - gap ]: collection [ j ], collection [ j - gap ] = collection [ j - gap ], collection [ j ] j -= gap return collection if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( shell_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/stooge_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def stooge_sort ( arr ): \"\"\" Examples: >>> stooge_sort([18.1, 0, -7.1, -1, 2, 2]) [-7.1, -1, 0, 2, 2, 18.1] >>> stooge_sort([]) [] \"\"\" stooge ( arr , 0 , len ( arr ) - 1 ) return arr def stooge ( arr , i , h ): if i >= h : return # If first element is smaller than the last then swap them if arr [ i ] > arr [ h ]: arr [ i ], arr [ h ] = arr [ h ], arr [ i ] # If there are more than 2 elements in the array if h - i + 1 > 2 : t = ( int )(( h - i + 1 ) / 3 ) # Recursively sort first 2/3 elements stooge ( arr , i , ( h - t )) # Recursively sort last 2/3 elements stooge ( arr , i + t , ( h )) # Recursively sort first 2/3 elements stooge ( arr , i , ( h - t )) if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( stooge_sort ( unsorted ))","title":"Stooge sort"},{"location":"content/algorithms/implementations/sorts/stooge_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/stooge_sort/#_2","text":"def stooge_sort ( arr ): \"\"\" Examples: >>> stooge_sort([18.1, 0, -7.1, -1, 2, 2]) [-7.1, -1, 0, 2, 2, 18.1] >>> stooge_sort([]) [] \"\"\" stooge ( arr , 0 , len ( arr ) - 1 ) return arr def stooge ( arr , i , h ): if i >= h : return # If first element is smaller than the last then swap them if arr [ i ] > arr [ h ]: arr [ i ], arr [ h ] = arr [ h ], arr [ i ] # If there are more than 2 elements in the array if h - i + 1 > 2 : t = ( int )(( h - i + 1 ) / 3 ) # Recursively sort first 2/3 elements stooge ( arr , i , ( h - t )) # Recursively sort last 2/3 elements stooge ( arr , i + t , ( h )) # Recursively sort first 2/3 elements stooge ( arr , i , ( h - t )) if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( stooge_sort ( unsorted ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/strand_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 import operator def strand_sort ( arr : list , reverse : bool = False , solution : list = None ) -> list : \"\"\" Strand sort implementation source: https://en.wikipedia.org/wiki/Strand_sort :param arr: Unordered input list :param reverse: Descent ordering flag :param solution: Ordered items container Examples: >>> strand_sort([4, 2, 5, 3, 0, 1]) [0, 1, 2, 3, 4, 5] >>> strand_sort([4, 2, 5, 3, 0, 1], reverse=True) [5, 4, 3, 2, 1, 0] \"\"\" _operator = operator . lt if reverse else operator . gt solution = solution or [] if not arr : return solution sublist = [ arr . pop ( 0 )] for i , item in enumerate ( arr ): if _operator ( item , sublist [ - 1 ]): sublist . append ( item ) arr . pop ( i ) # merging sublist into solution list if not solution : solution . extend ( sublist ) else : while sublist : item = sublist . pop ( 0 ) for i , xx in enumerate ( solution ): if not _operator ( item , xx ): solution . insert ( i , item ) break else : solution . append ( item ) strand_sort ( arr , reverse , solution ) return solution if __name__ == \"__main__\" : assert strand_sort ([ 4 , 3 , 5 , 1 , 2 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert strand_sort ([ 4 , 3 , 5 , 1 , 2 ], reverse = True ) == [ 5 , 4 , 3 , 2 , 1 ]","title":"Strand sort"},{"location":"content/algorithms/implementations/sorts/strand_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/strand_sort/#_2","text":"import operator def strand_sort ( arr : list , reverse : bool = False , solution : list = None ) -> list : \"\"\" Strand sort implementation source: https://en.wikipedia.org/wiki/Strand_sort :param arr: Unordered input list :param reverse: Descent ordering flag :param solution: Ordered items container Examples: >>> strand_sort([4, 2, 5, 3, 0, 1]) [0, 1, 2, 3, 4, 5] >>> strand_sort([4, 2, 5, 3, 0, 1], reverse=True) [5, 4, 3, 2, 1, 0] \"\"\" _operator = operator . lt if reverse else operator . gt solution = solution or [] if not arr : return solution sublist = [ arr . pop ( 0 )] for i , item in enumerate ( arr ): if _operator ( item , sublist [ - 1 ]): sublist . append ( item ) arr . pop ( i ) # merging sublist into solution list if not solution : solution . extend ( sublist ) else : while sublist : item = sublist . pop ( 0 ) for i , xx in enumerate ( solution ): if not _operator ( item , xx ): solution . insert ( i , item ) break else : solution . append ( item ) strand_sort ( arr , reverse , solution ) return solution if __name__ == \"__main__\" : assert strand_sort ([ 4 , 3 , 5 , 1 , 2 ]) == [ 1 , 2 , 3 , 4 , 5 ] assert strand_sort ([ 4 , 3 , 5 , 1 , 2 ], reverse = True ) == [ 5 , 4 , 3 , 2 , 1 ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tim_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 def binary_search ( lst , item , start , end ): if start == end : return start if lst [ start ] > item else start + 1 if start > end : return start mid = ( start + end ) // 2 if lst [ mid ] < item : return binary_search ( lst , item , mid + 1 , end ) elif lst [ mid ] > item : return binary_search ( lst , item , start , mid - 1 ) else : return mid def insertion_sort ( lst ): length = len ( lst ) for index in range ( 1 , length ): value = lst [ index ] pos = binary_search ( lst , value , 0 , index - 1 ) lst = lst [: pos ] + [ value ] + lst [ pos : index ] + lst [ index + 1 :] return lst def merge ( left , right ): if not left : return right if not right : return left if left [ 0 ] < right [ 0 ]: return [ left [ 0 ]] + merge ( left [ 1 :], right ) return [ right [ 0 ]] + merge ( left , right [ 1 :]) def tim_sort ( lst ): \"\"\" >>> tim_sort(\"Python\") ['P', 'h', 'n', 'o', 't', 'y'] >>> tim_sort((1.1, 1, 0, -1, -1.1)) [-1.1, -1, 0, 1, 1.1] >>> tim_sort(list(reversed(list(range(7))))) [0, 1, 2, 3, 4, 5, 6] >>> tim_sort([3, 2, 1]) == insertion_sort([3, 2, 1]) True >>> tim_sort([3, 2, 1]) == sorted([3, 2, 1]) True \"\"\" length = len ( lst ) runs , sorted_runs = [], [] new_run = [ lst [ 0 ]] sorted_array = [] i = 1 while i < length : if lst [ i ] < lst [ i - 1 ]: runs . append ( new_run ) new_run = [ lst [ i ]] else : new_run . append ( lst [ i ]) i += 1 runs . append ( new_run ) for run in runs : sorted_runs . append ( insertion_sort ( run )) for run in sorted_runs : sorted_array = merge ( sorted_array , run ) return sorted_array def main (): lst = [ 5 , 9 , 10 , 3 , - 4 , 5 , 178 , 92 , 46 , - 18 , 0 , 7 ] sorted_lst = tim_sort ( lst ) print ( sorted_lst ) if __name__ == \"__main__\" : main ()","title":"Tim sort"},{"location":"content/algorithms/implementations/sorts/tim_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tim_sort/#_2","text":"def binary_search ( lst , item , start , end ): if start == end : return start if lst [ start ] > item else start + 1 if start > end : return start mid = ( start + end ) // 2 if lst [ mid ] < item : return binary_search ( lst , item , mid + 1 , end ) elif lst [ mid ] > item : return binary_search ( lst , item , start , mid - 1 ) else : return mid def insertion_sort ( lst ): length = len ( lst ) for index in range ( 1 , length ): value = lst [ index ] pos = binary_search ( lst , value , 0 , index - 1 ) lst = lst [: pos ] + [ value ] + lst [ pos : index ] + lst [ index + 1 :] return lst def merge ( left , right ): if not left : return right if not right : return left if left [ 0 ] < right [ 0 ]: return [ left [ 0 ]] + merge ( left [ 1 :], right ) return [ right [ 0 ]] + merge ( left , right [ 1 :]) def tim_sort ( lst ): \"\"\" >>> tim_sort(\"Python\") ['P', 'h', 'n', 'o', 't', 'y'] >>> tim_sort((1.1, 1, 0, -1, -1.1)) [-1.1, -1, 0, 1, 1.1] >>> tim_sort(list(reversed(list(range(7))))) [0, 1, 2, 3, 4, 5, 6] >>> tim_sort([3, 2, 1]) == insertion_sort([3, 2, 1]) True >>> tim_sort([3, 2, 1]) == sorted([3, 2, 1]) True \"\"\" length = len ( lst ) runs , sorted_runs = [], [] new_run = [ lst [ 0 ]] sorted_array = [] i = 1 while i < length : if lst [ i ] < lst [ i - 1 ]: runs . append ( new_run ) new_run = [ lst [ i ]] else : new_run . append ( lst [ i ]) i += 1 runs . append ( new_run ) for run in runs : sorted_runs . append ( insertion_sort ( run )) for run in sorted_runs : sorted_array = merge ( sorted_array , run ) return sorted_array def main (): lst = [ 5 , 9 , 10 , 3 , - 4 , 5 , 178 , 92 , 46 , - 18 , 0 , 7 ] sorted_lst = tim_sort ( lst ) print ( sorted_lst ) if __name__ == \"__main__\" : main ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/topological_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\"Topological Sort.\"\"\" # a # / \\ # b c # / \\ # d e edges = { \"a\" : [ \"c\" , \"b\" ], \"b\" : [ \"d\" , \"e\" ], \"c\" : [], \"d\" : [], \"e\" : []} vertices = [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" ] def topological_sort ( start , visited , sort ): \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\" current = start # add current to visited visited . append ( current ) neighbors = edges [ current ] for neighbor in neighbors : # if neighbor not in visited, visit if neighbor not in visited : sort = topological_sort ( neighbor , visited , sort ) # if all neighbors visited add current to sort sort . append ( current ) # if all vertices haven't been visited select a new one to visit if len ( visited ) != len ( vertices ): for vertice in vertices : if vertice not in visited : sort = topological_sort ( vertice , visited , sort ) # return sort return sort if __name__ == \"__main__\" : sort = topological_sort ( \"a\" , [], []) print ( sort )","title":"Topological sort"},{"location":"content/algorithms/implementations/sorts/topological_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/topological_sort/#_2","text":"\"\"\"Topological Sort.\"\"\" # a # / \\ # b c # / \\ # d e edges = { \"a\" : [ \"c\" , \"b\" ], \"b\" : [ \"d\" , \"e\" ], \"c\" : [], \"d\" : [], \"e\" : []} vertices = [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" ] def topological_sort ( start , visited , sort ): \"\"\"Perform topolical sort on a directed acyclic graph.\"\"\" current = start # add current to visited visited . append ( current ) neighbors = edges [ current ] for neighbor in neighbors : # if neighbor not in visited, visit if neighbor not in visited : sort = topological_sort ( neighbor , visited , sort ) # if all neighbors visited add current to sort sort . append ( current ) # if all vertices haven't been visited select a new one to visit if len ( visited ) != len ( vertices ): for vertice in vertices : if vertice not in visited : sort = topological_sort ( vertice , visited , sort ) # return sort return sort if __name__ == \"__main__\" : sort = topological_sort ( \"a\" , [], []) print ( sort )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tree_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Tree_sort algorithm. Build a BST and in order traverse. \"\"\" class node : # BST data structure def __init__ ( self , val ): self . val = val self . left = None self . right = None def insert ( self , val ): if self . val : if val < self . val : if self . left is None : self . left = node ( val ) else : self . left . insert ( val ) elif val > self . val : if self . right is None : self . right = node ( val ) else : self . right . insert ( val ) else : self . val = val def inorder ( root , res ): # Recursive traversal if root : inorder ( root . left , res ) res . append ( root . val ) inorder ( root . right , res ) def tree_sort ( arr ): # Build BST if len ( arr ) == 0 : return arr root = node ( arr [ 0 ]) for i in range ( 1 , len ( arr )): root . insert ( arr [ i ]) # Traverse BST in order. res = [] inorder ( root , res ) return res if __name__ == \"__main__\" : print ( tree_sort ([ 10 , 1 , 3 , 2 , 9 , 14 , 13 ]))","title":"Tree sort"},{"location":"content/algorithms/implementations/sorts/tree_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/tree_sort/#_2","text":"\"\"\" Tree_sort algorithm. Build a BST and in order traverse. \"\"\" class node : # BST data structure def __init__ ( self , val ): self . val = val self . left = None self . right = None def insert ( self , val ): if self . val : if val < self . val : if self . left is None : self . left = node ( val ) else : self . left . insert ( val ) elif val > self . val : if self . right is None : self . right = node ( val ) else : self . right . insert ( val ) else : self . val = val def inorder ( root , res ): # Recursive traversal if root : inorder ( root . left , res ) res . append ( root . val ) inorder ( root . right , res ) def tree_sort ( arr ): # Build BST if len ( arr ) == 0 : return arr root = node ( arr [ 0 ]) for i in range ( 1 , len ( arr )): root . insert ( arr [ i ]) # Traverse BST in order. res = [] inorder ( root , res ) return res if __name__ == \"__main__\" : print ( tree_sort ([ 10 , 1 , 3 , 2 , 9 , 14 , 13 ]))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/unknown_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Python implementation of a sort algorithm. Best Case Scenario : O(n) Worst Case Scenario : O(n^2) because native Python functions:min, max and remove are already O(n) \"\"\" def merge_sort ( collection ): \"\"\"Pure implementation of the fastest merge sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: a collection ordered by ascending Examples: >>> merge_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_sort([]) [] >>> merge_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" start , end = [], [] while len ( collection ) > 1 : min_one , max_one = min ( collection ), max ( collection ) start . append ( min_one ) end . append ( max_one ) collection . remove ( min_one ) collection . remove ( max_one ) end . reverse () return start + collection + end if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( * merge_sort ( unsorted ), sep = \",\" )","title":"Unknown sort"},{"location":"content/algorithms/implementations/sorts/unknown_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/unknown_sort/#_2","text":"\"\"\" Python implementation of a sort algorithm. Best Case Scenario : O(n) Worst Case Scenario : O(n^2) because native Python functions:min, max and remove are already O(n) \"\"\" def merge_sort ( collection ): \"\"\"Pure implementation of the fastest merge sort algorithm in Python :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: a collection ordered by ascending Examples: >>> merge_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> merge_sort([]) [] >>> merge_sort([-2, -5, -45]) [-45, -5, -2] \"\"\" start , end = [], [] while len ( collection ) > 1 : min_one , max_one = min ( collection ), max ( collection ) start . append ( min_one ) end . append ( max_one ) collection . remove ( min_one ) collection . remove ( max_one ) end . reverse () return start + collection + end if __name__ == \"__main__\" : user_input = input ( \"Enter numbers separated by a comma: \\n \" ) . strip () unsorted = [ int ( item ) for item in user_input . split ( \",\" )] print ( * merge_sort ( unsorted ), sep = \",\" )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u00b6 \"\"\" Wiggle Sort. Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].... For example: if input numbers = [3, 5, 2, 1, 6, 4] one possible Wiggle Sorted answer is [3, 5, 1, 6, 2, 4]. \"\"\" def wiggle_sort ( nums : list ) -> list : \"\"\" Python implementation of wiggle. Example: >>> wiggle_sort([0, 5, 3, 2, 2]) [0, 5, 2, 3, 2] >>> wiggle_sort([]) [] >>> wiggle_sort([-2, -5, -45]) [-45, -2, -5] >>> wiggle_sort([-2.1, -5.68, -45.11]) [-45.11, -2.1, -5.68] \"\"\" for i , _ in enumerate ( nums ): if ( i % 2 == 1 ) == ( nums [ i - 1 ] > nums [ i ]): nums [ i - 1 ], nums [ i ] = nums [ i ], nums [ i - 1 ] return nums if __name__ == \"__main__\" : print ( \"Enter the array elements:\" ) array = list ( map ( int , input () . split ())) print ( \"The unsorted array is:\" ) print ( array ) print ( \"Array after Wiggle sort:\" ) print ( wiggle_sort ( array ))","title":"Wiggle sort"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/implementations/sorts/wiggle_sort/#_2","text":"\"\"\" Wiggle Sort. Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].... For example: if input numbers = [3, 5, 2, 1, 6, 4] one possible Wiggle Sorted answer is [3, 5, 1, 6, 2, 4]. \"\"\" def wiggle_sort ( nums : list ) -> list : \"\"\" Python implementation of wiggle. Example: >>> wiggle_sort([0, 5, 3, 2, 2]) [0, 5, 2, 3, 2] >>> wiggle_sort([]) [] >>> wiggle_sort([-2, -5, -45]) [-45, -2, -5] >>> wiggle_sort([-2.1, -5.68, -45.11]) [-45.11, -2.1, -5.68] \"\"\" for i , _ in enumerate ( nums ): if ( i % 2 == 1 ) == ( nums [ i - 1 ] > nums [ i ]): nums [ i - 1 ], nums [ i ] = nums [ i ], nums [ i - 1 ] return nums if __name__ == \"__main__\" : print ( \"Enter the array elements:\" ) array = list ( map ( int , input () . split ())) print ( \"The unsorted array is:\" ) print ( array ) print ( \"Array after Wiggle sort:\" ) print ( wiggle_sort ( array ))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430"},{"location":"content/algorithms/theory/","text":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u00b6 \u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0414\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u0438\u044f \u00b6 \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c) - \u043f\u043e\u043d\u044f\u0442\u0438\u0435, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432: \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445?. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f). \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0432\u043d\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0442\u043e\u0447\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0435 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e, \u0442.\u043a. \u0440\u0430\u0431\u043e\u0442\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u044f\u0434\u0430 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u043d\u0430\u0431\u043e\u0440\u0430 \u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438 \u0442.\u0434. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u00b6 \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439: \u041e-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, O (\u00ab\u041e\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb); \u041e\u043c\u0435\u0433\u0430-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, \u03a9 (\u00ab\u041e\u043c\u0435\u0433\u0430\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \ud835\udc47(\ud835\udc5b)=\ud835\udc42(\ud835\udc41^2) \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043c\u0435\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 (\u00ab\u041e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0442 \u044d\u043d \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u00bb). \u041a\u0430\u0436\u0434\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f: \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f: \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u041f\u0440\u0438 \u043f\u043e\u043b\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (1), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (\ud835\udc41), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \ud835\udc42(\\frac{\ud835\udc41}{2})=\ud835\udc42(\ud835\udc41) \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0438 O -\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u00b6 \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0445\u043d\u044f\u044f (\u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f) \u043e\u0446\u0435\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0442\u0430\u0446\u0438\u0438 O-\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438: \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (1). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f, \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0437\u044f\u0442\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0434\u0440. \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0435\u0440\u0435\u043b\u0438\u0441\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0442.\u0434. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0443 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a ). \u041b\u0438\u043d\u0435\u0439\u043d\u043e-\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c, \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435, \u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \ud835\udc41 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c. \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41 2 ). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b (\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442.\u0434.). \u041d\u0430 \u0440\u0438\u0441\u0443\u043d\u043a\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 O -\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u041e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u00b6 \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u043d\u0430\u0442\u044c \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445; \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u0412 Python \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445), \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u00b6 \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O (\ud835\udc41). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(lst) O (1) lst.append(5) O (1) lst.pop() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst.pop(-1) lst.clear() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst = [] lst[a:b] O ( b - a ) lst.extend(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 list(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 lst1 == lst2 O (\ud835\udc41) lst[a:b] == ... O (\ud835\udc41) del lst[i] O (\ud835\udc41) lst.remove(...) O (\ud835\udc41) x in/not in lst O (\ud835\udc41) \u041f\u043e\u0438\u0441\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 lst.copy() O (\ud835\udc41) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst[:] lst.pop(i) O (\ud835\udc41) min(lst)/max(lst) O (\ud835\udc41) lst.reverse() O (\ud835\udc41) for item in lst O (\ud835\udc41) [item for item in lst] O (\ud835\udc41) lst.sort() O (\ud835\udc41 log\ud835\udc41) \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438 k * lst O ( k * N ) \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u00b6 \u041f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e O (1). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(s) O(1) s.add(5) O(1) x in/not in s O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.remove(5) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.discard(5) O(1) s.pop(i) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e s = set() set(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 s != t O(len(s)) s <= t O(len(s)) s => t O(len(t)) s | t O(len(s) + len(t)) s & t O(len(s) + len(t)) s - t O(len(s) + len(t)) s ^ t O(len(s) + len(t)) for item in s: O(N) {item for item in s} O(N) s.copy() O(N) \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u00b6 \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(1) . \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 d[k] O(1) d[k] = v O(1) len(d) O(1) del d[k] O(1) d.pop(k) O(1) d.popitem() O(1) d.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e d = {} \u0438\u043b\u0438 d = dict() d.keys() O(1) dict(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 for k in d: O(N) \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: keys(), values(), items() {k: v for k, v in d.items() O(N) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u043b\u0443\u0447\u0448\u0435. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u00b6 \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0437\u0430\u043a\u043e\u043d\u044b \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)+\ud835\udc54(\ud835\udc5b)) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u043c \u0438\u0437 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445: \ud835\udc42(\ud835\udc41)+\ud835\udc42(log\ud835\udc5b)=\ud835\udc42(\ud835\udc41+log\ud835\udc5b)=\ud835\udc42(\ud835\udc41) \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)=3\u22c5\ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc41) \u043f\u0440\u0438 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 if test : # O(t) block 1 # O(b1) else : block 2 # O(b2) \ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc61)+\ud835\udc5a\ud835\udc4e\ud835\udc65(\ud835\udc42(\ud835\udc4f1),\ud835\udc42(\ud835\udc4f2)) \u0417\u0430\u043a\u043e\u043d \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)\u22c5\ud835\udc54(\ud835\udc5b)) # \u041e\u0431\u0449\u0430\u044f O(N^2) for i in range ( N ): # O(N) for j in range ( N ): # O(N) \u0428\u043f\u0430\u0433\u0440\u0430\u043b\u043a\u0430 \u043f\u043e \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u00b6 \u041f\u043e\u0438\u0441\u043a \u00b6 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u00b6 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 \u041a\u0443\u0447\u0438 \u00b6 \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u043e\u0432 \u00b6 \u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d \u0433\u0440\u0430\u0444 \u0441 |V| \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 |E| \u0440\u0435\u0431\u0440\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u041d\u043e\u0442\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430 \u00b6 ( \u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430. \u0422\u0435\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u0430\u043a (\u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u0442\u0430\u043a \u0438 (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 (\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u0445\u0443, \u0442\u0430\u043a \u0438 \u0441\u043d\u0438\u0437\u0443). \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 \u03a9(N LogN) \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 O(N LogN) \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN (\u03a9(N LogN)) \u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c N LogN (O(n logn)) . f(x)=O(g(n)) \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e f \u0440\u0430\u0441\u0442\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 g \u043a\u043e\u0433\u0434\u0430 n \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u043a \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u043e\u0441\u0442\u0430 f(x) \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u043e\u0441\u0442\u0430 g(n) . f(x)=O(g(n)) . \u0417\u0434\u0435\u0441\u044c \u0442\u0435\u043c\u043f\u044b \u0440\u043e\u0441\u0442\u0430 \u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c g(n) . O \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c \u00b6 \u0417\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u00b6 Big O cheatsheet \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u042e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u0430 \u0417\u043d\u0430\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 http://e-maxx.ru/algo/ http://www.algolist.net/Algorithms/ https://habr.com/ru/post/156361/ https://habr.com/ru/post/196560/ https://github.com/stucchio/Python-LRU-cache","title":"\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_1","text":"\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u0414\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"},{"location":"content/algorithms/theory/#_2","text":"\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c) - \u043f\u043e\u043d\u044f\u0442\u0438\u0435, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432: \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445?. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f). \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0432\u043d\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0442\u043e\u0447\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0435 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e, \u0442.\u043a. \u0440\u0430\u0431\u043e\u0442\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u044f\u0434\u0430 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u043d\u0430\u0431\u043e\u0440\u0430 \u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438 \u0442.\u0434. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u0438\u044f"},{"location":"content/algorithms/theory/#_3","text":"\u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439: \u041e-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, O (\u00ab\u041e\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u0431\u043e\u043b\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb); \u041e\u043c\u0435\u0433\u0430-\u043d\u043e\u0442\u0430\u0446\u0438\u044f, \u03a9 (\u00ab\u041e\u043c\u0435\u0433\u0430\u00bb-\u0431\u043e\u043b\u044c\u0448\u043e\u0435): \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00ab\u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0447\u0435\u043c\u2026\u00bb). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \ud835\udc47(\ud835\udc5b)=\ud835\udc42(\ud835\udc41^2) \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043c\u0435\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 (\u00ab\u041e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0442 \u044d\u043d \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u00bb). \u041a\u0430\u0436\u0434\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f: \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f: \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u041f\u0440\u0438 \u043f\u043e\u043b\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e: \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (1), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: O (\ud835\udc41), \u0435\u0441\u043b\u0438 \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430; \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \ud835\udc42(\\frac{\ud835\udc41}{2})=\ud835\udc42(\ud835\udc41)","title":"\u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u043e\u0442\u0430\u0446\u0438\u0438"},{"location":"content/algorithms/theory/#o-","text":"\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0445\u043d\u044f\u044f (\u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0430\u044f) \u043e\u0446\u0435\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0442\u0430\u0446\u0438\u0438 O-\u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 O -\u043d\u043e\u0442\u0430\u0446\u0438\u0438: \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (1). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f, \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0437\u044f\u0442\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0434\u0440. \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0435\u0440\u0435\u043b\u0438\u0441\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0442.\u0434. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0443 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f \u0432 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a ). \u041b\u0438\u043d\u0435\u0439\u043d\u043e-\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41log\ud835\udc41). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c, \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435, \u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \ud835\udc41 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c. \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f: O (\ud835\udc41 2 ). \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b (\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442.\u0434.). \u041d\u0430 \u0440\u0438\u0441\u0443\u043d\u043a\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 O -\u0431\u043e\u043b\u044c\u0448\u043e\u0435.","title":"\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0438 O-\u043d\u043e\u0442\u0430\u0446\u0438\u044f"},{"location":"content/algorithms/theory/#_4","text":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u043d\u0430\u0442\u044c \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445; \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.","title":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_5","text":"\u0412 Python \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445), \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c.","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/theory/#_6","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O (\ud835\udc41). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(lst) O (1) lst.append(5) O (1) lst.pop() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst.pop(-1) lst.clear() O (1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst = [] lst[a:b] O ( b - a ) lst.extend(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 list(...) O ( len (...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 lst1 == lst2 O (\ud835\udc41) lst[a:b] == ... O (\ud835\udc41) del lst[i] O (\ud835\udc41) lst.remove(...) O (\ud835\udc41) x in/not in lst O (\ud835\udc41) \u041f\u043e\u0438\u0441\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 lst.copy() O (\ud835\udc41) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e lst[:] lst.pop(i) O (\ud835\udc41) min(lst)/max(lst) O (\ud835\udc41) lst.reverse() O (\ud835\udc41) for item in lst O (\ud835\udc41) [item for item in lst] O (\ud835\udc41) lst.sort() O (\ud835\udc41 log\ud835\udc41) \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438 k * lst O ( k * N )","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u0440\u0442\u0435\u0436"},{"location":"content/algorithms/theory/#_7","text":"\u041f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c/\u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e O (1). \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 len(s) O(1) s.add(5) O(1) x in/not in s O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.remove(5) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.discard(5) O(1) s.pop(i) O(1) \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430, \u0433\u0434\u0435 O(N) s.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e s = set() set(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 s != t O(len(s)) s <= t O(len(s)) s => t O(len(t)) s | t O(len(s) + len(t)) s & t O(len(s) + len(t)) s - t O(len(s) + len(t)) s ^ t O(len(s) + len(t)) for item in s: O(N) {item for item in s} O(N) s.copy() O(N)","title":"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e"},{"location":"content/algorithms/theory/#_8","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(1) . \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 d[k] O(1) d[k] = v O(1) len(d) O(1) del d[k] O(1) d.pop(k) O(1) d.popitem() O(1) d.clear() O(1) \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e d = {} \u0438\u043b\u0438 d = dict() d.keys() O(1) dict(...) O(len(...)) \u0417\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043b\u0438\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 for k in d: O(N) \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: keys(), values(), items() {k: v for k, v in d.items() O(N) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0431\u044b \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c, \u0435\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u043b\u0443\u0447\u0448\u0435.","title":"\u0421\u043b\u043e\u0432\u0430\u0440\u044c"},{"location":"content/algorithms/theory/#o-_1","text":"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0437\u0430\u043a\u043e\u043d\u044b \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f. \u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)+\ud835\udc54(\ud835\udc5b)) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u043c \u0438\u0437 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445: \ud835\udc42(\ud835\udc41)+\ud835\udc42(log\ud835\udc5b)=\ud835\udc42(\ud835\udc41+log\ud835\udc5b)=\ud835\udc42(\ud835\udc41) \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)+\ud835\udc42(\ud835\udc41)=3\u22c5\ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc41) \u043f\u0440\u0438 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 if test : # O(t) block 1 # O(b1) else : block 2 # O(b2) \ud835\udc42(\ud835\udc41)=\ud835\udc42(\ud835\udc61)+\ud835\udc5a\ud835\udc4e\ud835\udc65(\ud835\udc42(\ud835\udc4f1),\ud835\udc42(\ud835\udc4f2)) \u0417\u0430\u043a\u043e\u043d \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0443\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0438\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439: \ud835\udc42(\ud835\udc53(\ud835\udc5b))+\ud835\udc42(\ud835\udc54(\ud835\udc5b))=\ud835\udc42(\ud835\udc53(\ud835\udc5b)\u22c5\ud835\udc54(\ud835\udc5b)) # \u041e\u0431\u0449\u0430\u044f O(N^2) for i in range ( N ): # O(N) for j in range ( N ): # O(N)","title":"\u0417\u0430\u043a\u043e\u043d \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f  O-\u043d\u043e\u0442\u0430\u0446\u0438\u0438"},{"location":"content/algorithms/theory/#_9","text":"","title":"\u0428\u043f\u0430\u0433\u0440\u0430\u043b\u043a\u0430 \u043f\u043e \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432"},{"location":"content/algorithms/theory/#_10","text":"","title":"\u041f\u043e\u0438\u0441\u043a"},{"location":"content/algorithms/theory/#_11","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"content/algorithms/theory/#_12","text":"","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/algorithms/theory/#_13","text":"","title":"\u041a\u0443\u0447\u0438"},{"location":"content/algorithms/theory/#_14","text":"\u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d \u0433\u0440\u0430\u0444 \u0441 |V| \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 |E| \u0440\u0435\u0431\u0440\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u043e\u0432"},{"location":"content/algorithms/theory/#_15","text":"( \u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435) \u2014 \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430. \u0422\u0435\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u0430\u043a (\u041e \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u0442\u0430\u043a \u0438 (\u041e\u043c\u0435\u0433\u0430 \u2014 \u0431\u043e\u043b\u044c\u0448\u043e\u0435), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 (\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0430 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u0445\u0443, \u0442\u0430\u043a \u0438 \u0441\u043d\u0438\u0437\u0443). \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 \u03a9(N LogN) \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 O(N LogN) \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 N LogN (\u03a9(N LogN)) \u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c N LogN (O(n logn)) . f(x)=O(g(n)) \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e f \u0440\u0430\u0441\u0442\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 g \u043a\u043e\u0433\u0434\u0430 n \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u043a \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u043e\u0441\u0442\u0430 f(x) \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u043e\u0441\u0442\u0430 g(n) . f(x)=O(g(n)) . \u0417\u0434\u0435\u0441\u044c \u0442\u0435\u043c\u043f\u044b \u0440\u043e\u0441\u0442\u0430 \u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c g(n) . O \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439.","title":"\u041d\u043e\u0442\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430"},{"location":"content/algorithms/theory/#_16","text":"\u0417\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0443\u043c"},{"location":"content/algorithms/theory/#_17","text":"Big O cheatsheet \u0423\u0447\u0435\u0431\u043d\u0438\u043a \u042e\u0440\u0438\u044f \u041f\u0435\u0442\u0440\u043e\u0432\u0430 \u0417\u043d\u0430\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 http://e-maxx.ru/algo/ http://www.algolist.net/Algorithms/ https://habr.com/ru/post/156361/ https://habr.com/ru/post/196560/ https://github.com/stucchio/Python-LRU-cache","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438"},{"location":"content/architecture/","text":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u00b6","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"content/architecture/#_1","text":"","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"content/datastructures/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u00b6 http://www.algolist.net/Data_structures/ https://www.interviewbit.com/courses/programming/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/datastructures/#_1","text":"http://www.algolist.net/Data_structures/ https://www.interviewbit.com/courses/programming/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"content/ipc_and_concurrency/","text":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u00b6 https://python-scripts.com/synchronization-between-threads","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435"},{"location":"content/ipc_and_concurrency/#_1","text":"https://python-scripts.com/synchronization-between-threads","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0435\u0436\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435"},{"location":"content/programming/","text":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u00b6 \u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0437\u043d\u0430\u043d\u0438\u044e \u044f\u0437\u044b\u043a\u0430, \u043d\u0430\u0432\u044b\u043a\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0441\u0442\u0438\u043b\u044f\u043c \u0438 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442.\u0434. \u041e\u0434\u043d\u043e \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a! \u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u044b \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438, \u0430 \u043d\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/programming/#_1","text":"\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0437\u043d\u0430\u043d\u0438\u044e \u044f\u0437\u044b\u043a\u0430, \u043d\u0430\u0432\u044b\u043a\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0441\u0442\u0438\u043b\u044f\u043c \u0438 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442.\u0434. \u041e\u0434\u043d\u043e \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a! \u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u044b \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438, \u0430 \u043d\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"content/programming/std/","text":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u00b6","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"content/programming/std/#_1","text":"","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"content/programming/tasks/","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u00b6","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"},{"location":"content/programming/tasks/#_1","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"}]}